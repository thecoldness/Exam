#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <climits>
#include <queue>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline ll read()
	{
		ll res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}

	const int Max_n = 3e4 + 5;
	const int Max_s = 1 << 6;
	const int Max_m = 2e5 + 5;

	ll f[Max_s][Max_n];

	int head[Max_n] , tot , n , m , p , tim;

	struct node
	{
		int nex , to;
		ll val;
		node(int a , int b , ll c)
		{
			nex = a , to = b , val = c;
		}
		node(){}
	}edge[Max_m << 1];

	inline void add_edge(const int x , const int y , const int z)
	{
		edge[ ++ tot] = node(head[x] , y , z) , head[x] = tot;
		edge[ ++ tot] = node(head[y] , x , z) , head[y] = tot;	
	}

	inline void clean()
	{
		memset(head , 0 , sizeof(head));
		tot = 0;
		for(int i = 0 ; i < (1 << (p + 1)) ; ++ i)
			for(int j = 1 ; j <= n ;++ j)
				f[i][j] = LLONG_MAX >> 1;
		f[1][1] = 0;
	}

	struct God
	{
		ll val , id;
		God(ll a , int b)
		{
			val = a , id = b;
		}
		God(){}
		bool operator < (const God &a)const
		{
			return val > a.val;
		}
	};

	priority_queue<God> zzz;

	int vis[Max_n];

	inline void main()
	{
		n = read() , m = read() , p = read();
		while(n != 0 && m != 0 && p != 0)
		{		
			clean();
			for(int i = 1 ; i <= p ; ++ i)
			{
				int ui = read();
				f[1 << i][ui] = 0;
			}
			++ p;	// bug
			for(int i = 1 ; i <= m ; ++ i)
			{
				int ui = read() , vi = read() , ti = read();
				add_edge(ui , vi , ti);
			}
			for(int s = 1 ; s < (1 << p) ; ++ s)
			{
				++ tim;
				// memset(vis , false , sizeof(vis));
				for(int i = 1 ; i <= n ; ++ i)
					for(int t = s ; t ; t = (t - 1) & s)
						f[s][i] = min(f[s][i] , f[t][i] + f[s ^ t][i]);
				for(int i = 1 ; i <= n ; ++ i)
					if(f[s][i] < (LLONG_MAX >> 1))
						zzz.push(God(f[s][i] , i));
				while(!zzz.empty())
				{
					ll de = zzz.top().val , now = zzz.top().id;
					zzz.pop();
					if(vis[now] == tim)	continue;
					vis[now] = tim;
					for(int i = head[now] ; i ; i = edge[i].nex)
					{
						int nex = edge[i].to , va = edge[i].val;
						// if(vis[nex] == tim)	continue;
						if(f[s][nex] > de + va)
						{
							f[s][nex] = de + va;
							zzz.push(God(de + va , nex));
						}
					}
				}
			}
			ll ans = LLONG_MAX;
			for(int i = 1 ; i <= n ; ++ i)
				ans = min(ans , f[(1 << p) - 1][i]);
			printf("%lld\n" , ans);
			n = read() , m = read() , p = read();
		}
	}
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
/*
5 4 2
4 5
1 2 1
1 3 2
1 4 3
1 5 4
7 8 3
3 6 7
1 2 2
1 4 3
2 3 4
3 5 3
3 7 5
4 5 3
4 6 5
5 7 4
0 0 0
*/
