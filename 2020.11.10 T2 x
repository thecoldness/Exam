#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cctype>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}

	const int Max_n = 1e5 + 5;

	int val[Max_n] , n , a[Max_n] , pre[Max_n];

	ll tree[Max_n << 2];

	inline int lowbit(const int x)
	{
		return x & -x;
	}

	inline void add(const int pos , const int val)
	{
		for(int i = pos ; i <= 2 * n ; i += lowbit(i))
			tree[i] += val;
	}

	inline ll query(const int pos)
	{
		ll ret = 0;
		if(pos < 0)
			return 0;
		for(int i = pos ; i ; i -= lowbit(i))
			ret += tree[i];
		return ret;
	}

	inline ll query(const int mid , const int len)
	{
		for(int i = 1 ; i <= n ; ++ i)
			if(a[i] < mid)
				val[i] = -1;
			else val[i] = 1;
		for(int i = 1 ; i <= n ; ++ i)
			pre[i] = pre[i - 1] + val[i];
		ll ret = 0;
		for(int i = 1 ; i <= n ; ++ i)
		{
			if(i - len >= 0)
				add(pre[i - len] + n , 1);
			ret += query(pre[i] + n - 1);
		}
		memset(tree , 0 , sizeof(tree));// bug
		return ret;
	}

	inline void main()
	{
		n = read();
		for(int i = 1 ; i <= n ; ++ i)
			a[i] = read();
		int m = read();
		while(m --)
		{
			int l1 = read() , r1 = read() , l2 = read() , r2 = read();
			ll ans = query(l1 , l2) - query(r1 + 1 , l2) - (query(l1 , r2 + 1) - query(r1 + 1 , r2 + 1));
			printf("%lld\n" , ans);
		}
	}
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
/*
5
4 1 2 2 5
5
2 4 2 3
2 4 1 3
2 5 2 5
3 5 2 5
1 5 3 5
*/
