#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
#include <map>
using namespace std;

inline int read()
{
	int res  =0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}

const int Max_n = 21;

int p , r , s , num[5] , n , def[5] , ans[1 << Max_n];

void build(int win , int l , int r)
{
	if(l == r)
	{
		++ num[win];
		return;
	}
	int mid = (l + r) >> 1;
	build(win , l , mid);
	build(def[win] , mid + 1 , r);
}

map<char , int> mp;

void dfs(int l , int r , int win)
{
	if(l == r)
	{
		ans[l] = win;
		return;
	}
	int mid = (l + r) >> 1;
	dfs(l , mid , win);
	dfs(mid + 1 , r , def[win]);
}

void check(int l , int r)
{
	if(l == r)	return;
	int mid = (l + r) >> 1 , len = (r - l + 1);
	check(l , mid);
	check(mid + 1 , r);
	for(int i = 0 ; i <= len / 2 - 1 ; ++ i)
	{
		if(ans[l + i] < ans[mid + i + 1])	break;
		if(ans[l + i] > ans[mid + i + 1])
		{
			for(int j = 0 ; j <= len / 2 - 1 ; ++ j)
				swap(ans[l + j] , ans[mid + j + 1]);
			break;
		}
	}
}

int main()
{
	r = read() , p = read() , s = read();
	n = r + p + s;
	def[1] = 2 , def[2] = 3 , def[3] = 1;
	build(1 , 1 , n);
	if(p == num[1] && r == num[2] && s == num[3])
		dfs(1 , n , 1);
	else if(p == num[2] && r == num[3] && s == num[1])
		dfs(1 , n , 3);
	else if(p == num[3] && r == num[1] && s == num[2])
		dfs(1 , n , 2);
	else
	{
		printf("IMPOSSIBLE");
		return 0;
	}
	mp[1] = 'P' , mp[2] = 'R' , mp[3] = 'S';
	check(1 , n);
	for(int i = 1 ; i <= n ; ++ i)
		putchar(mp[ans[i]]);
	return 0;
}
