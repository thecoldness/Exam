#include <cstdio>
#include <cstring>
#include <cctype>
#include <vector>
#include <algorithm>
using namespace std;

namespace thecold
{
	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}

	const int Max_n = 1e5 + 5;

	char c[Max_n];

	int link[Max_n << 1] , len[Max_n << 1] , n;
	int ch[Max_n << 1][27] , tot = 1 , lst = 1;

	inline void insert(const int x)
	{
		int p = lst , newpos = ++ tot;
		len[newpos] = len[p] + 1 , lst = newpos;
		while(p && !ch[p][x]) ch[p][x] = newpos , p = link[p];
		if(!p) return link[newpos] = 1 , void();
		int q = ch[p][x]; 
		if(len[q] == len[p] + 1) return link[newpos] = q , void();
		int clone = ++ tot; len[clone] = len[p] + 1;
		link[clone] = link[q] , link[q] = link[newpos] = clone;
		memcpy(ch[clone] , ch[q] , sizeof(ch[q]));
		while(p && ch[p][x] == q) ch[p][x] = clone , p = link[p];
	}

	struct Node
	{
		int l , bel;
		Node(int a , int b)
		{
			l = a , bel = b;
		}
		Node(){}
	};

	vector<Node> v[Max_n]; int m;

	struct EDG
	{
		int nex , to;
		EDG(int a , int b)
		{
			nex = a , to = b;
		}
		EDG(){}
	}edge[Max_n << 1];

	inline void MAX(int &x , const int y)
	{
		if(y > x) x = y;
	}

	struct SegmentTree
	{
		struct node
		{
			int l , r , tag , val;
			node(int a , int b)
			{
				l = a , r = b , tag = val = 0;
			}
			node(){}
		}tree[Max_n << 2];

		void build(const int l , const int r , const int tr)
		{
			tree[tr] = node(l , r);
			if(l == r) return;
			int mid = (l + r) >> 1;
			build(l , mid , tr * 2) , build(mid + 1 , r , tr * 2 + 1);
		}

		inline void push_down(const int tr)
		{
			if(!tree[tr].tag) return;
			int tag = tree[tr].tag;
			MAX(tree[tr * 2].tag , tag) , MAX(tree[tr * 2 + 1].tag , tag);
			MAX(tree[tr * 2].val , tag) , MAX(tree[tr * 2 + 1].val , tag);
			tree[tr].tag = 0;
		}

		inline void change(const int l , const int r , const int val , const int tr)
		{
			int ll = tree[tr].l , rr = tree[tr].r;
			if(ll > r || rr < l) return;
			if(l <= ll && rr <= r) return MAX(tree[tr].tag , val) , MAX(tree[tr].val , val);
			push_down(tr);
			change(l , r , val , tr * 2) , change(l , r , val , tr * 2 + 1);
		}

		inline int query(const int pos , const int tr)
		{
			int ll = tree[tr].l , rr = tree[tr].r;
			if(ll == rr) return tree[tr].val;
			push_down(tr); int mid = (ll + rr) >> 1;
			if(mid >= pos) return query(pos , tr * 2);
			return query(pos , tr * 2 + 1);
		}
	}ping , xie;

	int cnt , head[Max_n << 1] , col[Max_n << 1];

	inline void add_edge(const int x , const int y)
	{
		edge[ ++ cnt] = EDG(head[x] , y) , head[x] = cnt;
	}

	int fa[Max_n << 1] , son[Max_n << 1][2];

	inline void dfs_tree(const int now , const int from)
	{
		fa[now] = from;
		for(int i = head[now] ; i ; i = edge[i].nex)
			dfs_tree(edge[i].to , now);
	}	

	inline bool isroot(const int x)
	{
		return (son[fa[x]][1] != x) && (son[fa[x]][0] != x);
	}

	inline void rotate(const int x)
	{
		int fx = fa[x] , ffx = fa[fx];
		bool type = son[fx][1] == x;
		if(!isroot(fx)) son[ffx][son[ffx][1] == fx] = x;
		fa[x] = ffx , fa[fx] = x , fa[son[x][!type]] = fx;
		son[fx][type] = son[x][!type] , son[x][!type] = fx;
	}

	int st[Max_n << 1] , tp;

	inline void push_dn()
	{
		while(tp)	col[son[st[tp]][0]] = col[son[st[tp]][1]] = col[st[tp]] , -- tp;
	}

	inline void splay(const int x)
	{
		int tmp = x;
		while(!isroot(tmp)) st[ ++ tp] = tmp , tmp = fa[tmp];
		st[ ++ tp] = tmp;
		push_dn();
		while(!isroot(x))
		{
			int fx = fa[x] , ffx = fa[fx];
			if(!isroot(fx))
				rotate(((son[ffx][1] == fx) ^ (son[fx][1] == x)) ? x : fx);
			rotate(x);
		}
	}

	inline void access(int x , const int c)
	{
		for(int y = 0 ; x ; x = fa[y = x])
		{	
			splay(x);
			if(col[x])
			{		
				ping.change(1 , col[x] - len[x] + 1 , len[x] , 1);
				xie.change(col[x] - len[x] + 1 , col[x] , col[x] + 1 , 1);
			}
			col[x] = c; son[x][1] = y;
		}
	}

	int ans[Max_n];

	inline void main()
	{
		n = read() , m = read(); scanf("%s" , c + 1);
		for(int i = 1 ; i <= n ; ++ i) insert(c[i] - 'a');
		for(int i = 2 ; i <= tot ; ++ i) add_edge(link[i] , i);
		for(int i = 1 ; i <= m ; ++ i)
		{
			int ui = read() , vi = read();
			v[vi].push_back(Node(ui , i));
		}
		ping.build(1 , n , 1) , xie.build(1 , n , 1);
		dfs_tree(1 , 0); int now = 1;
		for(int i = 1 ; i <= n ; ++ i)
		{
			now = ch[now][c[i] - 'a'];
			access(now , i); int sz = v[i].size();
			for(int j = 0 ; j < sz ; ++ j)
			{
				int l = v[i][j].l , bel = v[i][j].bel;
				ans[bel] = max(ping.query(l , 1) , xie.query(l , 1) - l);
			}
		}
		for(int i = 1 ; i <= m ; ++ i) printf("%d\n" , ans[i]);
	}
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
/*
4 1
acac
1 4
*/
