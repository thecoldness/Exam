#include <cstdio>
#include <cctype>
#include <cstring>
#include <algorithm>
using namespace std;
#define int long long
typedef long long ll;
inline ll read()
{
	ll res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
const int Max_n = 305;
struct node
{
	ll key , val;
	node(ll a , ll b)
	{
		key = a , val = b;
	}
	node() {}
} pot[Max_n];
inline bool cmp(node a , node b)
{
	return a.key < b.key;
}
int n;
ll sum[Max_n] , f[Max_n][Max_n][2];
bool g[Max_n][Max_n] , subtask1;
ll gcd(ll a , ll b)
{
	return b == 0 ? a : gcd(b , a % b);
}
signed main()
{
	// freopen("data.in" , "r" , stdin);
	n = read();
	for(int i = 1 ; i <= n ; ++ i)
	{
		ll ui = read() , vi = read();
		pot[i] = node(ui , vi);
		if(ui == 1)	subtask1 = true;
	}
	if(subtask1)
	{
		printf("-1");
		return 0;
	}
	sort(pot + 1 , pot + n + 1 , cmp);
	for(int i = 1 ; i <= n ; ++ i)
		sum[i] = sum[i - 1] + pot[i].val;
	for(int i = 1 ; i <= n ; ++ i)
		for(int j = i ; j <= n ; ++ j)
			if(gcd(pot[i].key , pot[j].key) != 1)
				g[i][j] = g[j][i] = true;
	for(int i = 1 ; i <= n ; ++ i)
		g[i][0] = g[0][i] = g[n + 1][i] = g[i][n + 1] = true;
	for(int i = 1 ; i <= n ; ++ i)
	{
		if(g[i][i - 1])
			f[i][i][0] = pot[i].val;
		if(g[i][i + 1])
			f[i][i][1] = pot[i].val;
	}
	for(int len = 2 ; len <= n ; ++ len)
		for(int l = 1 ; l <= n - len + 1 ; ++ l)
		{
			int r = l + len - 1;
			for(int k = l + 1 ; k <= r - 1 ; ++ k)
			{
				if(g[k][l - 1] && f[l][k - 1][1] && f[k + 1][r][0])
					f[l][r][0] = max(f[l][r][0] , f[l][k - 1][1] + f[k + 1][r][0] + sum[r] - sum[l - 1]);
				if(g[k][r + 1] && f[l][k - 1][1] && f[k + 1][r][0])
					f[l][r][1] = max(f[l][r][1] , f[l][k - 1][1] + f[k + 1][r][0] + sum[r] - sum[l - 1]);
			}
			if(g[l][l - 1] && f[l + 1][r][0])
				f[l][r][0] = max(f[l][r][0] , f[l + 1][r][0] + sum[r] - sum[l - 1]);
			if(g[l - 1][r] && f[l][r - 1][1])
				f[l][r][0] = max(f[l][r][0] , f[l][r - 1][1] + sum[r] - sum[l - 1]);
			if(g[r][r + 1] && f[l][r - 1][1])
				f[l][r][1] = max(f[l][r][1] , f[l][r - 1][1] + sum[r] - sum[l - 1]);
			if(g[l][r + 1] && f[l + 1][r][0])
				f[l][r][1] = max(f[l][r][1] , f[l + 1][r][0] + sum[r] - sum[l - 1]);
		}
	if(max(f[1][n][0] , f[1][n][1]) == 0)
		printf("-1");
	else printf("%lld\n" , max(f[1][n][0] , f[1][n][1]));
	return 0;
}
