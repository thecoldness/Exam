#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
#include <queue>
using namespace std;
typedef long long ll;
inline int read()
{
	int res = 0;
	char c;
	bool flag  =false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
const int Max_n = 505;
int dis[Max_n * Max_n] , n , m , l[Max_n][Max_n] , r[Max_n][Max_n] , u[Max_n][Max_n] , d[Max_n][Max_n] , dis_wall[Max_n * Max_n];
int dx[5] = {1 , -1 , 0 , 0} , dy[5] = {0 , 0 , 1 , -1} , beg , fin;
char wall[Max_n][Max_n];
inline int getpos(int x , int y)
{
	if(x < 1 || x > n || y < 1 || y > m)	return 0;
	return (x - 1) * m + y;
}
bool vis[Max_n * Max_n];
struct node
{
	int val , id;
	node(int a , int b)
	{
		val = a , id = b;
	}
	node() {}
	bool operator < (const node &a)const
	{
		return val > a.val;
	}
};
priority_queue<node> q;
inline void MSR()
{
	vis[0] = true;
	while(!q.empty())
	{
		int now = q.top().id , de = q.top().val;
		q.pop();
		if(vis[now])	continue;
		vis[now] = true , dis[now] = de;
		int nowx = now / m + 1 , nowy = now % m;
		if(!nowy) -- nowx , nowy = m;
		for(int i = 0 ; i < 4 ; ++ i)
		{
			int nex = getpos(nowx + dx[i] , nowy + dy[i]);
			if(vis[nex])	continue;
			q.push(node(de + 1 , nex));
		}
	}
}
inline void MSR_ans()
{
	while(!q.empty())
	{
		int now = q.top().id , de = q.top().val;
		q.pop();
		if(vis[now])	continue;
		vis[now] = true , dis[now] = de;
		if(now == fin)	break;
		int nowx = now / m + 1 , nowy = now % m;
		if(!nowy)	-- nowx , nowy = m;
		if(!vis[getpos(nowx , l[nowx][nowy] + 1)])
			q.push(node(de + dis_wall[now] , getpos(nowx , l[nowx][nowy] + 1)));
		if(!vis[getpos(nowx , r[nowx][nowy] - 1)])
			q.push(node(de + dis_wall[now] , getpos(nowx , r[nowx][nowy] - 1)));
		if(!vis[getpos(u[nowx][nowy] + 1 , nowy)])
			q.push(node(de + dis_wall[now]  , getpos(u[nowx][nowy] + 1 , nowy)));
		if(!vis[getpos(d[nowx][nowy] - 1 , nowy)])
			q.push(node(de + dis_wall[now] , getpos(d[nowx][nowy] - 1 , nowy)));
		for(int i = 0 ; i < 4 ; ++ i)
		{
			int nex = getpos(nowx + dx[i] , nowy + dy[i]);
			if(vis[nex])	continue;
			q.push(node(de + 1 , nex));
		}
	}
}
int main()
{
	n = read() , m = read();
	for(int i = 1 ; i <= n ; ++ i)
		scanf("%s" , wall[i] + 1);
	for(int i = 1 ; i <= n ; ++ i)
		for(int j = 1 ; j <= m ; ++ j)
			if(wall[i][j] == '#')	l[i][j] = j;
			else l[i][j] = l[i][j - 1];
	for(int i = 1 ; i <= n ; ++ i)
		for(int j = m ; j ; -- j)
			if(wall[i][j] == '#')	r[i][j] = j;
			else r[i][j] = r[i][j + 1];
	for(int j = 1 ; j <= m ; ++ j)
		for(int i = 1 ; i <= n ; ++ i)
			if(wall[i][j] == '#')	u[i][j] = i;
			else u[i][j] = u[i - 1][j];
	for(int j = 1 ; j <= m ; ++ j)
		for(int i = n ; i ; -- i)
			if(wall[i][j] == '#')	d[i][j] = i;
			else d[i][j] = d[i + 1][j];
	for(int i = 1 ; i <= n ; ++ i)
		for(int j = 1 ; j <= m ; ++ j)
			if(wall[i][j] == '#')	q.push(node(0 , getpos(i , j)));
	MSR();
	memcpy(dis_wall , dis , sizeof(dis));
	memset(dis , 0x3f3f , sizeof(dis));
	memset(vis , false , sizeof(vis));
	for(int i = 1 ; i <= n ; ++ i)
		for(int j = 1 ; j <= m ; ++ j)
		{
			if(wall[i][j] == 'C')	beg = getpos(i , j);
			if(wall[i][j] == 'F')	fin = getpos(i , j);
			if(wall[i][j] == '#')	vis[getpos(i , j)] = true;
		}
	q.push(node(0 , beg));
	vis[0] = true;
	MSR_ans();
	if(dis[fin] > n * m)	printf("nemoguce");
	else printf("%d" , dis[fin]);
	return 0;
}
