#include <cstdio>
#include <cctype>
#include <cstring>
#include <algorithm>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}

	const int Max_n = 2e5 + 5; const int jzp = 998244353;
	const int G = 3; const int Gi = (jzp + 1) / G;

	inline int quickpow(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1) ret = ret * x % jzp;
			x = x * x % jzp , y >>= 1;
		}
		return ret;
	}

	struct node
	{
		int nex , to;
		node(int a , int b)
		{
			nex = a , to = b;
		}
		node(){}
	}edge[Max_n << 1];

	int head[Max_n] , tot , n , m , from[Max_n] , to[Max_n] , dep[Max_n];
	int siz[Max_n] , w[Max_n] , pre[Max_n] , nex[Max_n];

	ll jc[Max_n] , invjc[Max_n] , f[Max_n << 2] , g[Max_n << 2] , all;

	inline void add_edge(const int x , const int y)
	{
		edge[ ++ tot] = node(head[x] , y) , head[x] = tot;
		edge[ ++ tot] = node(head[y] , x) , head[y] = tot;
	}

	void dfs_tree(const int now , const int from)
	{
		dep[now] = dep[from] + 1 , siz[now] = 1;
		for(int i = head[now] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to; if(nex == from) continue;
			dfs_tree(nex , now); siz[now] += siz[nex];// bug!!!
		}
	}

	inline int C(const int n , const int m)
	{
		if(m > n) return 0;
		return jc[n] * invjc[m] % jzp * invjc[n - m] % jzp;
	}

	inline int add(const int x , const int y)
	{
		int ret = x + y;
		if(ret >= jzp) ret -= jzp;
		return ret;
	}

	int len , lim , rev[Max_n << 2];

	inline void prepare(const int lenth)
	{
		len = 1 , lim = 0;
		while(len <= lenth) len <<= 1 , ++ lim;
		for(int i = 1 ; i < len ; ++ i)
			rev[i] = (rev[i >> 1] >> 1) | ((i & 1) << (lim - 1));
	}

	inline void NTT(ll* w , const int opt)
	{
		for(int i = 1 ; i < len ; ++ i)
			if(rev[i] > i) swap(w[rev[i]] , w[i]);
		for(int dep = 1 ; dep <= lim ; ++ dep)
		{
			int base = quickpow(opt == 1 ? G : Gi , (jzp - 1) / (1 << dep));
			for(int i = 0 ; i < len ; i += 1 << dep)
			{
				int q = 1;
				for(int j = 0 ; j < 1 << (dep - 1) ; ++ j)
				{
					int ui = w[i + j] , vi = 1ll * q * w[i + j + (1 << (dep - 1))] % jzp;
					w[i + j] = add(ui , vi) , w[i + j + (1 << (dep - 1))] = add(ui , jzp - vi);
					q = 1ll * q * base % jzp;
				}
			}
		}
		if(opt == -1)
		{
			int inv = quickpow(len , jzp - 2);
			for(int i = 0 ; i < len ; ++ i) w[i] = 1ll * w[i] * inv % jzp;
		}
	}

	inline void main()
	{
		n = read() , m = read();
		for(int i = 1 ; i < n ; ++ i)
		{
			from[i] = read() , to[i] = read() , w[i] = read();
			add_edge(from[i] , to[i]) , all += w[i];
		}
		dfs_tree(1 , 0); jc[0] = invjc[0] = 1 , all = all * 2 % jzp;//all *= 2; bug
		for(int i = 1 ; i < n ; ++ i) if(dep[from[i]] > dep[to[i]]) swap(from[i] , to[i]);
		for(int i = 1 ; i <= n ; ++ i) jc[i] = jc[i - 1] * i % jzp;
		invjc[n] = quickpow(jc[n] , jzp - 2);
		for(int i = n - 1 ; i ; -- i) invjc[i] = invjc[i + 1] * (i + 1) % jzp;
		for(int i = 0 ; i <= n ; ++ i) g[i] = invjc[i];
		for(int i = 1 ; i < n ; ++ i) f[n - siz[to[i]]] = add(f[n - siz[to[i]]] , 1ll * w[i] * jc[siz[to[i]]] % jzp);
		prepare(2 * n + 2); NTT(f , 1) , NTT(g , 1);
		for(int i = 0 ; i < len ; ++ i) f[i] = f[i] * g[i] % jzp;
		NTT(f , -1); for(int i = 1 ; i <= n ; ++ i) pre[i] = f[n - i];
		for(int i = 0 ; i < len ; ++ i) f[i] = g[i] = 0;
		for(int i = 0 ; i <= n ; ++ i) g[i] = invjc[i];
		for(int i = 1 ; i < n ; ++ i) f[siz[to[i]]] = add(f[siz[to[i]]] , 1ll * w[i] * jc[n - siz[to[i]]] % jzp);
		NTT(f , 1) , NTT(g , 1);
		for(int i = 0 ; i < len ; ++ i) f[i] = f[i] * g[i] % jzp;
		NTT(f , -1); for(int i = 1 ; i <= n ; ++ i) nex[i] = f[n - i];
		while(m --)
		{
			int x = read(); 
			printf("%lld\n" , add(all , jzp - 2ll * jc[n - x] % jzp * invjc[n] % jzp * add(pre[x] , nex[x]) % jzp));
		}
	}
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
