#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 2e5 + 5;
	const int Max_dot = 2e7 + 5;
	const int INF = 2e9;
	
	int son[Max_dot][2] , sum[Max_dot] , n , w[Max_n];
	int root = 1 , tot = 1;
	
	ll ans;
	
	inline void insert(const int x)
	{
		int now = root;
		for(int i = 30 ; i >= 0 ; -- i)
		{
			++ sum[now];
			if(now == 0)	break;
			int ch = (x >> (i - 1)) & 1;
			if(!son[now][ch])	son[now][ch] = ++ tot;
			now = son[now][ch];
		}
	}
	
	int calc(const int now , const int opp , const int val , const int dep)
	{
		if(dep == 0)	return val;
		int ret = INF;
		if(son[now][0])
		{
			if(son[opp][0])	ret = calc(son[now][0] , son[opp][0] , val , dep - 1);
			else if(son[opp][1]) 
				ret = calc(son[now][0] , son[opp][1] , val | (1 << (dep - 1)) , dep - 1);
		}
		if(son[now][1])
		{
			if(son[opp][1])	ret = min(ret , calc(son[now][1] , son[opp][1] , val , dep - 1));
			else if(son[opp][0]) 
				ret = min(ret , calc(son[now][1] , son[opp][0] , val | (1 << (dep - 1)) , dep - 1));
		}
		return ret;
	}
	
	void dfs(const int now , const int dep)
	{
		if(!son[now][0] && !son[now][1])	return;
		if(!son[now][0])	return dfs(son[now][1] , dep - 1);
		if(!son[now][1])	return dfs(son[now][0] , dep - 1);
		dfs(son[now][0] , dep - 1) , dfs(son[now][1] , dep - 1);
		if(sum[son[now][0]] <= sum[son[now][1]])
			ans += calc(son[now][0] , son[now][1] , 1 << (dep - 1) , dep - 1);
		else ans += calc(son[now][1] , son[now][0] , 1 << (dep - 1) , dep - 1);
	}

	inline void main()
	{
		n = read();
		for(int i = 1 ; i <= n ; ++ i)
			w[i] = read() , insert(w[i]);
		dfs(root , 30);
		printf("%lld\n" , ans);
	}
}

int main()
{
	thecold::main();
	return 0;
}
