#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
using namespace std;
inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
const int Max_n = 1e6 + 5;
const int MOD = 998244353;
typedef long long ll;
ll f[Max_n];
int n , m , id , head[Max_n] , tot , in[Max_n];
struct node
{
	int nex , to;
	node(int a , int b)
	{
		nex = a , to = b;
	}
	node() {}
} edge[Max_n * 2];
inline void add_edge(int x , int y)
{
	edge[ ++ tot] = node(head[x] , y);
	head[x] = tot;
}
inline int quickpow(int x , int y)
{
	ll ret = 1 , base = x;
	while(y)
	{
		if(y & 1)	ret *= base , ret %= MOD;
		base *= base , base %= MOD;
		y >>= 1;
	}
	return ret;
}
inline int ni(int x)
{
	return quickpow(x , MOD - 2);
}
int main()
{
	id = read() , n = read() , m = read();
	for(int i = 1 ; i <= m ; ++ i)
	{
		int ui = read() , vi = read();
		add_edge(ui , vi);
		++ in[ui];
	}
	f[1] = 0;
	for(int i = 1 ; i <= n ; ++ i)
	{
		for(int j = head[i] ; j ; j = edge[j].nex)
			f[i + 1] += f[i] - f[edge[j].to] + 1 , f[i + 1] %= MOD;
		f[i + 1] += 1 + f[i] , f[i + 1] %= MOD;
	}
	printf("%lld" , (f[n + 1] + MOD) % MOD);
	return 0;
}
