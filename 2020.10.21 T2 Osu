#include <cstdio>
#include <cctype>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <bitset>
#include <climits>
using namespace std;

typedef long long ll;

inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}

const int Max_n = 2e3 + 5;

struct node
{
	int posx , posy , ti;
	node(int a , int b , int c)
	{
		posx = a , posy = b , ti = c;
	}
	node() {}
} dot[Max_n];

int n , m , maxx = - INT_MAX, minx = INT_MAX , maxy = - INT_MAX, miny = INT_MAX;
int f[Max_n];

double l , r , ans , max_ans , dis[Max_n][Max_n];

ll a , b , c , g;

const double eps = 1e-6;

inline double get_v(const int x , const int y)
{
	if(dis[x][y])
		return dis[x][y];
	return dis[x][y] = hypot((double)dot[x].posx - dot[y].posx , (double)dot[x].posy - dot[y].posy) / (double)(dot[x].ti - dot[y].ti);
}

inline bool check(const double lim)
{
	memset(f , 0 , sizeof(f));
	for(int i = 1 ; i <= n ; ++ i)
	{
		int ans = -1;
		for(int j = 0 ; j < i ; ++ j)
			if((ans < 0 || f[j] > f[ans]) && (get_v(i , j) - lim <= eps))
				ans = j;
		if(ans >= 0)
			f[i] = f[ans] + 1;
		if(f[i] >= m)	return true;
	}
	return false;
}

bitset<Max_n> tmp[Max_n];

int pre[Max_n];

inline int find(const double lim)
{
	memset(f , 0 , sizeof(f));
	for(int i = 1 ; i <= n ; ++ i)
	{
		int ans = -1;
		for(int j = 0 ; j < i ; ++ j)
			if((ans < 0 || f[j] > f[ans]) && (get_v(i , j) - lim <= eps))
				ans = j;
		if(ans >= 0)
		{
			pre[i] = ans;
			f[i] = f[ans] + 1;
		}
		if(f[i] >= m)	return i;
	}
	return -1;
}

inline ll quickpow(ll x , int y)
{
	ll ret = 1;
	while(y)
	{
		if(y & 1)
			ret *= x;
		x *= x , y >>= 1;
	}
	return ret;
}

inline ll divide(ll x)
{
	ll ret = 1;
	for(ll i = 2 ; i * i <= x ; ++ i)
	{
		if(x % i)	continue;
		ll tmpi = 0;
		while(x % i == 0)
			x /= i , ++ tmpi;
		ret *= quickpow(i , tmpi / 2);
	}
	return ret;
}

ll gcd(ll a , ll b)
{
	return b == 0 ? a : gcd(b , a % b);
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	n = read() , m = read();
	for(int i = 1 ; i <= n ; ++ i)
	{
		int ui = read() , vi = read() , ki = read();
		dot[i] = node(vi , ki , ui);
		maxx = max(vi , maxx) , minx = min(minx , vi);
		maxy = max(ki , maxy) , miny = min(miny , ki);
	}
	l = 0.0 , r = hypot((double)maxx - minx , (double)maxy - miny);
	while(r - l >= -eps)
	{
		double mid = (l + r) / 2.0;
		if(check(mid))
		{
			ans = mid;
			r = mid - eps;
		}
		else
			l = mid + eps;
	}
	int ed = find(ans) , lst = ed;
	for(int i = pre[ed]; i > 0 ; i = pre[i])
	{
		if(max_ans - get_v(lst , i) <= -eps)
		{
			ll tmpi = quickpow(((ll)dot[i].posx - dot[lst].posx) , 2);
			tmpi += quickpow(((ll)dot[i].posy - dot[lst].posy) , 2);
			ll ret = divide(tmpi);
			tmpi /= ret * ret;
			b = tmpi , g = gcd(ret , dot[lst].ti - dot[i].ti);
			a = ret / g , c = (dot[lst].ti - dot[i].ti) / g;
			max_ans = get_v(lst , i);
		}
		lst = i;
	}
	printf("%lld %lld %lld" , a , b , c);
	return 0;
}
