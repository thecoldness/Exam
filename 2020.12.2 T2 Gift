#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <queue>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 55;
	
	int n , m , t , dis[Max_n][Max_n];
	int mp[Max_n][Max_n] , tp , tot , w[20][20];
	int qx , qy , kx , ky , ans , cnt[1 << 17];
	int dx[4] = {0 , 0 , -1 , 1} , dy[4] = {1 , -1 , 0 , 0};
	
	ll f[1 << 17][20];
	
	char c[Max_n][Max_n];
	
	struct God
	{
		int xi , yi , dis;
		God(int a , int b , int c)
		{
			xi = a , yi = b , dis = c;
		}
		God(){}
		bool operator < (const God &a)const
		{
			return dis > a.dis;
		}
	};
	
	struct node
	{
		int xi , yi;
		node(int a , int b)
		{
			xi = a , yi = b;
		}
		node(){}
	}remp[25];
	
	priority_queue<God> zzz;
	
	bool vis[Max_n][Max_n];
	
	inline bool legal(const int x , const int y)
	{
		if(x < 1 || x > n || y < 1 || y > m)	return false;
		if(vis[x][y] || c[x][y] == '#')	return false;
		return true;
	}
	
	inline void shortest_path(const int x , const int y)
	{
		memset(dis , 0x3f , sizeof(dis)) , memset(vis , false , sizeof(vis));
		dis[x][y] = 0;zzz.push(God(x , y , 0));
		while(!zzz.empty())
		{
			int nowx = zzz.top().xi , nowy = zzz.top().yi;
			zzz.pop();
			if(vis[nowx][nowy])	continue;
			vis[nowx][nowy] = true;
			for(int i = 0 ; i < 4 ; ++ i)
				if(legal(nowx + dx[i] , nowy + dy[i]))
				if(dis[nowx][nowy] + 1 < dis[nowx + dx[i]][nowy + dy[i]])
				{
					dis[nowx + dx[i]][nowy + dy[i]] = dis[nowx][nowy] + 1;
					zzz.push(God(nowx + dx[i] , nowy + dy[i] , dis[nowx + dx[i]][nowy + dy[i]]));
				}
		}
	}
	
	inline int lowbit(const int x)
	{
		return x & -x;
	}
	
	inline void main()
	{
		n = read() , m = read() , t = read();
		for(int i = 1 ; i <= n ; ++ i)
			scanf("%s" , c[i] + 1);
		for(int i = 1 ; i <= n ; ++ i)
			for(int j = 1 ; j <= m ; ++ j)
			{
				if(c[i][j] == 'Q') qx = i , qy = j;
				if(c[i][j] == 'K') kx = i , ky = j;
				if(c[i][j] == 'G') mp[i][j] = ++ tp , remp[tp] = node(i , j);
			}
		mp[kx][ky] = ++ tp , remp[tp] = node(kx , ky);
		mp[qx][qy] = ++ tp , remp[tp] = node(qx , qy);
		for(int i = 1 ; i <= tp ; ++ i)
		{
			shortest_path(remp[i].xi , remp[i].yi);
			for(int j = 1 ; j <= tp ; ++ j)
				w[i][j] = dis[remp[j].xi][remp[j].yi];
		}
//		memset(f , 0 , sizeof(f)); bug
		memset(f , 0x3f , sizeof(f));
//		f[0][tp - 2] = 0;
		f[0][tp - 1] = 0;
		int all = (1 << (tp - 2)) - 1;
		for(int i = 1 ; i <= all ; ++ i)
			cnt[i] = cnt[i - lowbit(i)] + 1;
		for(int i = 1 ; i <= all ; ++ i)
			for(int j = 1 ; j <= tp ; ++ j)
			{
//				if(j > tp - 2)
//					for(int k = 1 ; k <= tp - 2 ; ++ k)
//						if(w[k][j] <= n * m)
//							f[i][j] = min(f[i][j] , f[i][k] + w[k][j] * (cnt[i] + 1)); bug
				if(j > tp - 2)
				{
					for(int k = 1 ; k <= tp - 2 ; ++ k)
						if(w[k][j] <= n * m)
							f[i][j] = min(f[i][j] , f[i][k] + w[k][j] * (cnt[i] + 1));					
				}
//				else if(i & (1 << (tp - 1))) bug
				else if(i & (1 << (j - 1)))
					for(int k = 1 ; k <= tp ; ++ k)
					if(w[k][j] <= n * m)
//						f[i][j] = min(f[i][j] , f[i ^ (1 << (tp - 1))][k] + w[k][j] * cnt[i]);bug
						f[i][j] = min(f[i][j] , f[i ^ (1 << (j - 1))][k] + w[k][j] * cnt[i]);		
			}
	
		for(int i = 1 ; i <= all ; ++ i)
			if(f[i][tp] <= t)
				ans = max(ans , cnt[i]);
		printf("%d\n" , ans);
//		for(int i = 1 ; i <= tp ; ++ i)
//		{
//			for(int j = 1 ; j <= tp ; ++ j)
//				printf("%d " , w[i][j]);
//			puts("");
//		}
	}
}

int main()
{
	thecold::main();
	return 0;
}
/*
*/
