#include <cstdio>
#include <cctype>
#include <algorithm>
using namespace std;
inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
const int Max_n = 5e3 + 5;
int f[Max_n][Max_n] , pre[Max_n][Max_n] , n , a[Max_n] , m , k , nex[Max_n];
int main()
{
	n = read() , m = read() , k = read();
	for(int i = 1 ; i <= n ; ++ i)
		a[i] = read();
	for(int i = 1 ; i < n ; ++ i)
		nex[i] = i + 1;
	nex[n] = 1;
	for(int i = 1 ; i <= n ; ++ i)
		pre[i][m] = f[i][m] = a[i] ^ 1;
	for(int j = m - 1 ; j >= 0 ; -- j)
		for(int i = 1 ; i <= n ; ++ i)
		{
			int ct = pre[nex[i]][j + 1] - pre[nex[i]][min(j + k , m) + 1] , cnt = min(j + k , m) - j;
			if(a[nex[i]] == 1)	f[i][j] = ct > 0;
			else f[i][j] = (ct == cnt);
			pre[i][j] = pre[i][j + 1] + f[i][j];
		}
	for(int i = 1 ; i < n ; ++ i)
		if(a[i] == 1)	printf("%d " , (pre[i][1] - pre[i][k + 1]) > 0);
		else printf("%d " , (pre[i][1] - pre[i][k + 1]) == k);
	if(a[n] == 1)	printf("%d" , (pre[n][1] - pre[n][k + 1]) > 0);
	else printf("%d" , (pre[n][1] - pre[n][k + 1]) == k);
	return 0;
}
