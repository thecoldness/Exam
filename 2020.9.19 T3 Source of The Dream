#include <cstdio>
#include <algorithm>
#include <cctype>
#include <cctype>
#include <cstring>
using namespace std;
typedef long long ll;
inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
const int Max_n = 1e6 + 5;
const int MOD = 998244353;
ll n , k , a[Max_n] , check[Max_n] , len;
ll f[Max_n];
struct node
{
	ll val , cnt;
	node(ll a , ll b)
	{
		val = a , cnt = b;
	}
	node() {}
} val[Max_n] , bef[Max_n];
node operator + (node a , node b)
{
	return node((a.val + b.val) % MOD , (a.cnt + b.cnt) % MOD);
}
node operator - (node a , node b)
{
	return node(((a.val - b.val) % MOD + MOD) % MOD , ((a.cnt - b.cnt) % MOD + MOD) % MOD);
}
inline int lowbit(int x)
{
	return x & -x;
}
inline void add(int x , node val)
{
	for(int i = x ; i <= len ; i += lowbit(i))
		::val[i] = ::val[i] + val;
}
inline node query(int x)
{
	node ret = node(0 , 0);
	for(int i = x ; i ; i -= lowbit(i))
		ret = ret + val[i];
	return ret;
}
inline int quickpow(int x , int y)
{
	ll ret = 1 , base = x % MOD;
	while(y)
	{
		if(y & 1)	ret *= base , ret %= MOD;
		base *= base , base %= MOD;
		y >>= 1;
	}
	return ret;
}
inline int ni(ll x)
{
	return quickpow(x , MOD - 2);
}
int main()
{
	n = read() , k = read();
	for(int i = 1 ; i <= n ; ++ i)
		a[i] = check[i] = read();
	sort(check + 1 , check + n + 1);
	len = unique(check + 1 , check + n + 1) - check;
	for(int i = 1 ; i <= n ; ++ i)
	{
		int pos;
		if(i - k - 1 > 0)
		{
			pos = lower_bound(check + 1 , check + len , a[i - k - 1]) - check;
			add(pos , node(-a[i - k - 1] , -1));
		}
		pos = lower_bound(check + 1 , check + len , a[i]) - check;
		bef[i] = query(pos);
		add(pos , node(a[i] , 1));
	}
	f[1] = a[1];
	for(int i = 2 ; i <= n ; ++ i)
	{
		ll l = max((ll)1 , i - k) , r = i - 1;
		len = r - l + 1;
		f[i] = f[i - 1] * len % MOD;
		f[i] += a[i] * bef[i].cnt - bef[i].val , f[i] %= MOD;
		f[i] = (f[i] + MOD) % MOD;
		f[i] = f[i] * ni(len) % MOD;
	}
	printf("%lld" , f[n]);
	return 0;
}
