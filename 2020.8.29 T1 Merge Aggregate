#include<cstdio>
#include<cctype>
#include<cstring>
#include<algorithm>
using namespace std;
inline int read()
{
	int res = 0;
	char c;
	bool flag = true;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c != '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return flag ? res : -res;
}
const int Max_n = 305;
int n , a[Max_n * 2] , f[Max_n * 2][Max_n * 2] , g[Max_n * 2][Max_n * 2]  , ans;
int main()
{
	#ifdef MYDEBUG
	freopen("merge.in" , "r" , stdin);
	freopen("merge.out" , "w" , stdout);
	#endif
	bool buk[Max_n];
	n = read();
	for(int i = 1 ; i <= n ; ++ i)
		a[i] = a[n + i] = read();
	for(int i = 1 ; i <= n * 2 ; ++ i)
	{
		memset(buk , 0 , sizeof(buk));
		int cnt = 0;
		for(int j = i ; j <= min(n * 2 , i + n - 1) ; ++ j)
		{
			if(!buk[a[j]])	++ cnt;
			buk[a[j]] |= true;
			g[i][j] = cnt;
		}
	}
	for(int len = 2 ; len <= n ; ++ len)
		for(int l = 1 ; l <= 2 * n - len + 1 ; ++ l)
		{
			int r = l + len - 1;
			for(int k = l ; k < r ; ++ k)
				f[l][r] = max(f[l][r] , f[l][k] + f[k + 1][r] + g[l][k] * g[k + 1][r]);
		}
	for(int i = 1 ; i <= n ; ++ i)
		ans = max(ans , f[i][i + n - 1]);
	printf("%d" , ans);
	return 0;
}
