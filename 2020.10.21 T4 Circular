#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cctype>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}

	const int Max_n = 1e5 + 5;

	int n , m , len , logm[Max_n * 4] , ans;
	int tot;

	ll lsh[Max_n * 4] , jmp[Max_n * 2][20];

	struct Node
	{
		int id;
		ll pos;
		Node(int a , ll b)
		{
			id = a , pos = b;
		}
		Node() {}
		bool operator < (const Node &a)const
		{
			return pos < a.pos;
		}
	} f[Max_n * 4][20];

	struct node
	{
		ll li , ri;
		node(ll a , ll b)
		{
			li = a , ri = b;
		}
		node() {}
	} dot[Max_n * 2];

	inline int find(const ll x)
	{
		return lower_bound(lsh + 1 , lsh + len , x) - lsh;
	}

	inline void build()
	{
		for(int i = 2 ; i <= max(len , n * 2); ++ i)//bug for(int i = 2 ; i <= len ;  ++ i)
			logm[i] = logm[i / 2] + 1;
		for(int j = 1 ; j <= logm[len] ; ++ j)
			for(int i = 1 ; i <= len ; ++ i)
				if(i + (1 << j) - 1 <= len)
					f[i][j] = min(f[i][j - 1] , f[i + (1 << (j - 1))][j - 1]);
	}

	inline int get_min(int l , int r)
	{
		int len = r - l + 1;
		return min(f[l][logm[len]] , f[r - (1 << logm[len]) + 1][logm[len]]).id;
	}

	inline void build_jmp()
	{
		for(int j = 1 ; j <= logm[n * 2] ; ++ j)
			for(int i = 1 ; i <= n * 2 ; ++ i)
				jmp[i][j] = jmp[jmp[i][j - 1]][j - 1];
	}

	inline int quickpow(int x , int y)
	{
		int ret = 1;
		while(y)
		{
			if(y & 1)
				ret *= x;
			x *= x , y >>= 1;
		}
		return ret;
	}

	inline int find_ans(const int beg)
	{
		int ret = 0 , now = beg;
		for(int i = 19 ; i >= 0 ; -- i)
		{
			if(!jmp[now][i] || dot[jmp[now][i]].ri - dot[beg].li > m)	continue;
			now = jmp[now][i];
			ret += quickpow(2 , i);
		}
		return ret + 1;
	}

	void main()
	{
		// freopen("data.in" , "r" , stdin);
		m = read() , n = read();
		for(int i = 1 ; i <= n ; ++ i)
		{
			ll ui = read() , vi = read();
			if(vi < ui)
				vi += m;
			dot[i * 2 - 1] = node(ui , vi);
			dot[i * 2] = node(ui + m , vi + m);
			lsh[ ++ tot] = ui , lsh[ ++ tot] = vi;
			lsh[ ++ tot] = ui + m , lsh[ ++ tot] = vi + m;
		}
		sort(lsh + 1 , lsh + tot + 1);
		len = unique(lsh + 1 , lsh + tot + 1) - lsh;
		memset(f , 0x3f , sizeof(f));
		for(int i = 1 ; i <= n * 2 ; ++ i)
			f[find(dot[i].li)][0] = min(f[find(dot[i].li)][0] , Node(i , dot[i].ri));
		build();
		for(int i = 1 ; i <= n * 2 ; ++ i)
		{
			jmp[i][0] = get_min(find(dot[i].ri) , len);
			if(jmp[i][0] > n * 2)
				jmp[i][0] = 0;
		}
		build_jmp();
		for(int i = 1 ; i <= 2 * n ; ++ i)
			ans = max(ans , find_ans(i));
		printf("%d\n" , ans);
	}
}

int main()
{
	thecold::main();
	return 0;
}
/*
3 5
0 1
1 2
0 1
1 0
2 0
*/
