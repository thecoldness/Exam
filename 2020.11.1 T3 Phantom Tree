#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cctype>
using namespace std;

namespace thecold
{
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}

	const int Max_n = 2e5 + 5;
	const int Max_m = 25;
	const int Max_k = 1e6 + 5;

	int n , m , q , f[Max_n][Max_m] , head[Max_n];
	int a[Max_m][Max_m] , c[Max_n] , tot , k[Max_n];

	struct node
	{
		int nex , to;
		node(int a , int b)
		{
			nex = a , to = b;
		}
		node(){}
	}edge[Max_n * 2];

	inline void add_edge(const int x , const int y)
	{
		edge[ ++ tot] = node(head[x] , y) , head[x] = tot;
		edge[ ++ tot] = node(head[y] , x) , head[y] = tot;
	}

	void dfs(const int now , const int from)
	{
		for(int i = 1 ; i <= m ; ++ i)
			if(a[i][c[now]])// bug : used to be a[c[now]][i]
				f[now][i] = f[from][i];
			else f[now][i] = now;
		for(int i = head[now] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to;
			if(nex == from)	continue;
			dfs(nex , now);
		}
	}

	inline void main()
	{
		n = read() , m = read() , q = read();
		for(int i = 1 ; i <= m ; ++ i)
			for(int j = 1 ; j <= m ; ++ j)
				a[i][j] = read();
		for(int i = 1 ; i <= n ; ++ i)
			c[i] = read();
		for(int i = 1 ; i < n ; ++ i)
			add_edge(read() , read());
		dfs(1 , 0);
		while(q --)
		{
			int ki = read() , now = read();
			for(int i = 1 ; i <= ki ; ++ i)
				k[i] = read();
			for(int i = ki ; i ; -- i)
				now = f[now][k[i]];
			if(now == 0)
				puts("1");
			else puts("0");
		}
	}
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
