#include <cctype>
#include <algorithm>
#include <cstdio>
#include <random>
#include <chrono>
#include <cstring>
using namespace std;
inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
mt19937 rnd;
inline int getr(int l , int r)
{
	uniform_int_distribution<int> dis(l , r);
	return dis(rnd);
}
const int Max_n = 105;
struct node
{
	int nex , to;
	node(int a , int b)
	{
		nex = a , to = b;
	}
	node() {}
} edge[Max_n * 2];
int n , m , tp , tot , head[Max_n] , dfn[Max_n] , low[Max_n] , tim , nex[10][25] , ans;
char sym[Max_n] , wa[10][25];
bool vis[Max_n];
inline void add_edge(int x , int y)
{
	edge[ ++ tot] = node(head[y] , x);
	head[y] = tot;
}
void tarjan(int now)
{
	vis[now] = true;
	dfn[now] = low[now] = ++ tim;
	for(int i = head[now] ; i ; i = edge[i].nex)
	{
		int nex = edge[i].to;
		if(!vis[nex])
		{
			tarjan(nex);
			low[now] = min(low[nex] , low[now]);
		}
		else low[now] = min(low[now] , dfn[nex]);
	}
	if(low[now] != dfn[now])
	{
		printf("0.00");
		exit(0);
	}
}
inline void check()
{
	for(int i = 0 ; i <= n ; ++ i)
		if(!vis[i])	tarjan(i);
}
int squ[Max_n][Max_n] , siz[Max_n];
void dfs(int now)
{
	int tmp[Max_n];
	siz[now] = 0;
	for(int i = head[now] ; i ; i = edge[i].nex)
	{
		int nex = edge[i].to;
		dfs(nex);
		int szn = siz[now] , snex = siz[nex] , begn = 0 , begnex = 0;
		for(int i = 1 ; i <= siz[now] + siz[nex] ; ++ i)
		{
			int ran = getr(1 , szn + snex);
			if(ran <= szn)
				tmp[i] = squ[now][ ++ begn] , -- szn;
			else	tmp[i] = squ[nex][ ++ begnex] , -- snex;
		}
		siz[now] += siz[nex];
		memcpy(squ[now] , tmp , sizeof(tmp));
	}
	++ siz[now];
	squ[now][siz[now]] = now;
}
inline void topu()
{
	dfs(0);
	char got[Max_n];
	for(int i = 1 ; i <= n ; ++ i)
		got[i] = sym[squ[0][i]];
	reverse(got + 1 , got + n + 1);
	bool okay = false;
	for(int i = 1 ; i <= m ; ++ i)
	{
		int len = strlen(wa[i] + 1) , now = 0;
		for(int j = 1 ; j <= n ; ++ j)
		{
			while(now && wa[i][now + 1] != got[j])	now = nex[i][now];
			if(wa[i][now + 1] == got[j])	++ now;
			if(now == len)
			{
				okay = true;
				break;
			}
		}
		if(okay)	break;
	}
	ans += !okay;
}
inline void get_nex()
{
	for(int i = 1 ; i <= m ; ++ i)
	{
		int last = 0 , len = strlen(wa[i] + 1);
		for(int k = 2 ; k <= len ; ++ k)
		{
			while(last && wa[i][last + 1] != wa[i][k])	last = nex[i][last];
			if(wa[i][last + 1] == wa[i][k])	++ last;
			nex[i][k] = last;
		}
	}
}
int main()
{
	// freopen("data.in" , "r" , stdin);
	rnd.seed(std::chrono::steady_clock::now().time_since_epoch().count());
	n = read();
	for(int i = 1 ; i <= n ; ++ i)
		add_edge(i , read());
	scanf("%s" , sym + 1);
	m = read();
	for(int i = 1 ; i <= m ; ++ i)
		scanf("%s" , wa[i] + 1);
	check();
	get_nex();
	for(int i = 1 ; i <= (int)1e4 ; ++ i)
		topu();
	printf("%.4lf" , (double)ans / 1e4);
}
