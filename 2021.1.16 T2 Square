#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <queue>
#include <cassert>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline ll read()
	{
		ll res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}
	
	const int Max_n = 3e5 + 5;
	
	int n , a[Max_n] , st[Max_n] , son[Max_n][2] , tot , tp;
	int li[Max_n] , ri[Max_n] , root , mx;
	
	inline void insert(const int x)
	{
		int lst = 0;
		while(tp && a[x] < a[st[tp]]) lst = st[tp] , -- tp;
		son[st[tp]][1] = x , st[ ++ tp] = x , son[x][0]	= lst;
	}
	
	bool vis[Max_n];
	
	void dfs_tree(const int now , const int l , const int r)
	{
		if(!now) return;// bug
		li[now] = l , ri[now] = r;
		dfs_tree(son[now][0] , l , now - 1) , dfs_tree(son[now][1] , now + 1 , r);
	}
	
//	inline ll get_val(const int l , const int p , const int r , const int k) bug
	inline ll get_val(const int l , const int p , const int r , const ll k)
	{
//		if(k == 0) return 0;// bug
////		int lim = r - k + 1;  bug
//		int lim = min(r - k + 1 , p + 1);	ll ret = 0;
////		ret += 1ll * (r - p + 1) * (max(l , lim) - p + 1); bug
//		if(lim <= p) ret += 1ll * (r - p + 1) * (p - max(l , lim) + 1);
//		if(l < lim) ret += 1ll * (k - p) * (min(r - k , p) - l + 1) + 1ll * (min(r - k , p) + l) * (min(r - k , p) - l + 1) / 2;
//		return ret;
		if(k == 0) return 0;
//		int lim = r - k + 1; bug
		int lim = max(r - k + 1 , 1ll * l);
		int beg = min(p , lim - 1) , ed = max(1ll * l , p - k); ll ret = 0;
//		if(lim <= p)  bug
		if(lim <= p)	ret += 1ll * (p - lim + 1) * (r - p + 1);
		if(beg >= l && ed <= beg) ret += 1ll * (k - p) * (beg - ed + 1) + 1ll * (beg + ed) * (beg - ed + 1) / 2;
		return ret;
	}
	
	inline ll calc(const ll square)
	{
		ll ret = 0;
		for(int i = 1 ; i <= n ; ++ i)
		{
			ll len = square / a[i];
//			if(len <= ri[i] - li[i] + 1)  bug
//			if(len >= ri[i] - li[i] + 1)
			ret += get_val(li[i] , i , ri[i] , len);
		}
		return ret;
	}
	
	struct God
	{
		ll square; int pos , len , cnt;
		God(ll s , int a , int b , int c)
		{
			square = s , pos = a , len = b , cnt = c;
		}
		God(){}
		bool operator < (const God &a) const 
		{
//			return square < a.square; bug
			return square > a.square;
		}
	};
	
	priority_queue<God> zzz;
	
	inline void build(const ll s)
	{
		for(int i = 1 ; i <= n ; ++ i)
		{
			ll len = s / a[i] + 1;
//			if(ri[i] - li[i] + 1 > len) continue; bug
			if(ri[i] - li[i] + 1 < len) continue;
			int l = max(i - len + 1 , 1ll * li[i]) , r = min(ri[i] - len + 1 , 1ll * i);
			zzz.push(God(len * a[i] , i , len , r - l + 1));
		}
	}
	
	inline void debug()
	{
		for(int i = 1 ; i <= 21 ; ++ i)
			printf("%lld\n" , calc(i));
	}
	
	inline void main()
	{
		n = read();
		for(int i = 1 ; i <= n ; ++ i)
			a[i] = read() , insert(i) , mx = max(mx , a[i]);
		for(int i = 1 ; i <= n ; ++ i)
			vis[son[i][0]] = vis[son[i][1]] = true;
		ll llim = read() , rlim = read();
		for(int i = 1 ; i <= n ; ++ i)
			if(!vis[i]) {root = i; break;}
		dfs_tree(root , 1 , n);
//		debug();
		ll l = 0 , r = 1ll * n * mx , ans = 0;
		while(l <= r)
		{
			ll mid = (l + r) >> 1 , cnt = calc(mid);
			if(cnt >= llim) ans = mid , r = mid - 1;
			else l = mid + 1;
		}
		ll beg = calc(ans) , rem = rlim - llim + 1; build(ans);
		for(ll i = llim ; i <= min(beg , rlim) ; ++ i)
			printf("%lld " , ans) , -- rem;
		while(rem)
		{
			assert(zzz.size());
			ll tmp = zzz.top().square; int pos = zzz.top().pos , len = zzz.top().len , cnt = zzz.top().cnt;
			zzz.pop();// bug
			while(rem && cnt) printf("%lld " , tmp) , -- rem , -- cnt;
//			if(ri[pos] - li[pos] + 1 >= len + 1)	
//				zzz.push(God(a[pos] * (len + 1) , pos , len + 1 , min(ri[pos] - len , pos) - li[pos] + 1)); bug
			if(ri[pos] - li[pos] + 1 < len + 1) continue;
			int l = max(pos - len , li[pos]) , r = min(ri[pos] - len , pos);
			zzz.push(God(1ll * (len + 1) * a[pos] , pos , len + 1 , r - l + 1));
		}
	}
}

signed main()
{
//	freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
/*
9
6 4 3 5 4 3 4 1 2
12 20
1 2 2 2 3 3 3 3 4 4 4 4 4 5 5 5 6 6 6 6 6 6 6 7 7 8 8 8 8 9 9 9 9 9 9 12 12 12 12 15 15 15 18 18 21
9
7 4 3 5 4 6 9 3 2
32 45
*/
