#include <cstdio>
#include <algorithm>
#include <cctype>
#include <cstring>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}

	const int Max_m = 4e5 + 5;
	const int Max_n = 2e5 + 5;

	int n , m , q , tot = 1 , tim , etot , bel[Max_n] , cnt , siz[Max_n] , logm[Max_n] , add_tot;
	int dfn[Max_n] , low[Max_n] , head[Max_n] , ehead[Max_n] , dep[Max_n] , fa[Max_n][20];

	ll ans , val[Max_n];

	bool iscut[Max_m * 2];

	struct node
	{
		int nex , to;
		node(int a , int b)
		{
			nex = a , to = b;
		}
		node() {}
	} edge[Max_m * 2] , e[Max_m * 2] , add[Max_m * 2];

	inline void add_edge(const int x , const int y)
	{
		edge[ ++ tot] = node(head[x] , y) , head[x] = tot;
		edge[ ++ tot] = node(head[y] , x) , head[y] = tot;
	}

	void tarjan(int now , int from)
	{
		dfn[now] = low[now] = ++ tim;
		for(int i = head[now] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to;
			if(i == (from ^ 1))	continue;
			if(dfn[nex])
				low[now] = min(low[now] , dfn[nex]);
			else tarjan(nex , i) , low[now] = min(low[nex] , low[now]);
			if(low[nex] > dfn[now])
				iscut[i] = iscut[i ^ 1] = true;
		}
	}

	inline void pre_work()
	{
		for(int i = 2 ; i <= n ; ++ i)
			logm[i] = logm[i / 2] + 1;
	}

	void build(const int now)
	{
		bel[now] = cnt , ++ siz[cnt];
		for(int i = head[now] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to;
			if(!bel[nex] && !iscut[i])
				build(nex);
			if(iscut[i])
				add[ ++ add_tot] = node(now , nex);
		}
	}

	inline void add_e(const int x , const int y)
	{
		e[ ++ etot] = node(ehead[bel[x]] , bel[y]);
		ehead[bel[x]] = etot;
	}

	void dfs_fa(const int now , const int from)
	{
		dep[now] = dep[from] + 1 , fa[now][0] = from;
		siz[now] += siz[from] , val[now] += val[from];
		for(int i = 1 ; i <= logm[dep[now]] ; ++ i)
			fa[now][i] = fa[fa[now][i - 1]][i - 1];
		for(int i = ehead[now] ; i ; i = e[i].nex)
		{
			int nex = e[i].to;
			if(nex == from)	continue;
			dfs_fa(nex , now);
		}
	}

	inline int lca(int x , int y)
	{
		while(dep[x] > dep[y])
			x = fa[x][logm[dep[x] - dep[y]]];
		while(dep[y] > dep[x])
			y = fa[y][logm[dep[y] - dep[x]]];
		if(x == y)	return x;
		for(int i = logm[dep[x]] ; i >= 0 ; -- i)
		{
			if(fa[x][i] == fa[y][i])	continue;
			x = fa[x][i] , y = fa[y][i];
		}
		return fa[x][0];
	}

	inline ll calc(const ll x)
	{
		return  x * (x - 1);
	}

	inline ll query(const int x , const int y)
	{
		ll ret = 0;
		int l = lca(x , y);
		ret = calc(siz[x] + siz[y] - siz[l] - siz[fa[l][0]]);
		ret -= val[x] + val[y] - val[l] - val[fa[l][0]];
		return ret;
	}

	inline bool cmp(node a , node b)
	{
		if(a.nex == b.nex)
			return a.to < b.to;
		return a.nex < b.nex;
	}

	void main()
	{
		// freopen("data.in" , "r" , stdin);
		n = read() , m = read() , q = read();
		for(int i = 1 ; i <= m ; ++ i)
			add_edge(read() , read());
		pre_work();
		tarjan(1 , 0);
		for(int i = 1 ; i <= n ; ++ i)
			if(!bel[i])
				++ cnt , build(i);
		for(int i = 1 ; i <= cnt ; ++ i)
			val[i] = (ll)siz[i] * (siz[i] - 1);
		sort(add + 1 , add + add_tot + 1 , cmp);
		for(int i = 1 ; i <= add_tot ; ++ i)
			if(add[i].nex != add[i - 1].nex || add[i].to != add[i - 1].to)
				add_e(add[i].nex , add[i].to);
		dfs_fa(1 , 0);
		while(q --)
		{
			int ui = bel[read()] , vi = bel[read()];
			if(ui == vi)	continue;
			ans += query(ui , vi);
		}
		printf("%lld\n" , ans);
	}
}

int main()
{
	thecold::main();
	return 0;
}
