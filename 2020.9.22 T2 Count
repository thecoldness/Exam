#include <cstdio>
#include <algorithm>
#include <cctype>
#include <climits>
typedef long long ll;
inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
const int Max_n = 3005;
const int MOD = 998244353;
int n , m , p[Max_n] , tot , copn;
ll jc[Max_n] , cnt = 1 , all = 1;
inline int quickpow(int x , int y)
{
	ll ret = 1 , base = x;
	while(y)
	{
		if(y & 1)	ret *= base , ret %= MOD;
		base *= base , base %= MOD;
		y >>= 1;
	}
	return ret;
}
inline int ni(int x)
{
	return quickpow(x , MOD - 2);
}
inline int C(int n , int m)
{
	if(m > n)	return 0;
	return jc[n] * ni(jc[n - m] * jc[m] % MOD) % MOD;
}
int main()
{
	n = read() , m = read();
	for(int i = 2 ; i * i <= n ; ++ i)
	{
		if(n % i)	continue;
		++ tot;
		while(n % i == 0)
			++ p[tot] , n /= i;
	}
	if(n != 1)	p[ ++ tot] = 1;
	for(int i = 1 ; i <= tot ; ++ i)
		cnt *= p[i] + 1 , cnt %= MOD;
	ll ans = quickpow(cnt , 2 * m);
	jc[0] = 1;
	for(int i = 1 ; i <= 3000 ; ++ i)
		jc[i] = jc[i - 1] * i % MOD;
	for(int i = 1 ; i <= tot ; ++ i)
	{
		ll red = 0;
		for(int k = 0 ; k <= m ; ++ k)
			if(k % 2)	red -= (ll)C(2 * m , k) * C(p[i] * m - k * (p[i] + 1) + 2 * m - 1 , 2 * m - 1) % MOD , red %= MOD;
			else red += (ll)C(2 * m , k) * C(p[i] * m - k * (p[i] + 1) + 2 * m - 1 , 2 * m - 1) % MOD , red %= MOD;
		all *= red , all %= MOD;
	}
	ans = (ans - all) * ni(2) % MOD + all;
	ans %= MOD , ans = (ans + MOD) % MOD;
	printf("%lld" , ans);
	return 0;
}
