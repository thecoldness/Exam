#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
using namespace std;
typedef long long ll;
inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
const int Max_n = 45;
const int MOD = 1e9 + 7;
const int Max_d = 1605;
inline int quickpow(ll x , int y)
{
	ll ret = 1;
	while(y)
	{
		if(y & 1)	ret *= x , ret %= MOD;
		x *= x , x %= MOD;
		y >>= 1;
	}
	return ret;
}
inline int ni(int x)
{
	return quickpow(x , MOD - 2);
}
ll f[Max_n][Max_n][Max_d] , ans , jc[100000 + Max_n];
inline int C(int n , int m)
{
	if(m > n)	return 0;
	return jc[n] * ni(jc[m] * jc[n - m] % MOD) % MOD;
}
int n , d , r[Max_n];
int main()
{
	// freopen("data.in" , "r" , stdin);
	n = read() , d = read();
	jc[0] = 1;
	for(int i = 1 ; i <= n ; ++ i)
		r[i] = read();
	sort(r + 1 , r + n + 1);
	for(int i = 1 ; i <=  d + n ; ++ i)
		jc[i] = jc[i - 1] * i % MOD;
	f[1][1][0] = 1;
	for(int i = 1 ; i < n ; ++ i)
		for(int j = 1 ; j <= i ; ++ j)
			for(int k = 0 ; k <= r[i] * i ; ++ k)
			{
				f[i + 1][j - 1][k + 2 * r[i + 1]] += f[i][j][k] * (j - 1) % MOD , f[i + 1][j - 1][k + 2 * r[i + 1]] %= MOD;
				f[i + 1][j][k + r[i + 1]] += f[i][j][k] * 2 * j % MOD , f[i + 1][j][k + r[i + 1]] %= MOD;
				f[i + 1][j + 1][k] += f[i][j][k] * (j + 1) % MOD , f[i + 1][j + 1][k] %= MOD;
			}	for(int i = 1 ; i <= min(d , n * 40); ++ i)
		ans += f[n][1][i] * C(d - i + n - 1 , n) % MOD , ans %= MOD;
	printf("%lld" , ans);
	return 0;
}
