#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 21;
	const int jzp = 1e9 + 7;
	
	ll f[1 << Max_n][Max_n];
	
	int n , flt[Max_n] , cnt[1 << Max_n];
	int m , k;
	
	inline int lowbit(const int x)
	{
		return x & -x;
	}
	
	inline void main()
	{
		n = read() , m = read() , k = read();
		for(int i = 1 ; i <= m ; ++ i)
		{
			int ui = read() , vi = read();
			flt[ui - 1] |= 1 << (vi - 1);
		}
		for(int i = 1 ; i < (1 << n) ; ++ i)
			cnt[i] = cnt[i - lowbit(i)] + 1;
		for(int i = 0 ; i < n ; ++ i)
			f[1 << i][0] = 1;
		for(int s = 1 ; s < (1 << n) ; ++ s)
			for(int i = 0 ; i < n ; ++ i)
				if(!(s & (1 << i)))
				{
					int ct = cnt[flt[i] & s];
					for(int j = ct ; j <= k ; ++ j)
						f[s | (1 << i)][j] += f[s][j - ct] , f[s | (1 << i)][j] %= jzp;
				}
		ll ans = 0;
		for(int i = 0 ; i <= k ; ++ i)
			ans += f[(1 << n) - 1][i] , ans %= jzp;
		printf("%lld\n" , ans);
	}
}

int main()
{
	thecold::main();
	return 0;
}
/*
4 2 1
1 3
4 2
*/
