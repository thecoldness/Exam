#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 2e5 + 5;
	const int jzp = 998244353;
	
	int n , m , base;
	int cnt , fa[Max_n << 1];
	
	ll val[Max_n << 1] , w[Max_n];
	
	inline int quickpow(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1)
				ret = ret * x % jzp;
			x = x * x % jzp , y >>= 1;
		}
		return ret;
	}

	int find(const int x)
	{
		if(fa[x] == x)	return x;
		int tmp = fa[x];
		fa[x] = find(fa[x]);
		if(fa[x] != tmp)// bug
			val[x] *= val[tmp] , val[x] %= jzp;
		return fa[x];
	}

	inline void merge(const int x , const int y)
	{
		fa[find(x)] = find(y);
	}
	
	inline void main()
	{
		cnt = n = read() , m = read();
		w[0] = 1;
		for(int i = 1 ; i <= n ; ++ i)
			w[i] = w[i - 1] * 3 % jzp;
		base = quickpow(3 , jzp - 2);
		for(int i = 1 ; i <= n + m ; ++ i)
			val[i] = 1 , fa[i] = i;
		while(m --)
		{
			int opt = read();
			if(opt == 1)
			{
				int wi = read() , qi = read();
				++ cnt;
//				val[find(wi)] *= 2ll * base % jzp , val[find(wi)] %= jzp;
//				val[find(qi)] *= base , val[find(qi)] %= jzp; bug
				val[find(wi)] *= 2ll * base % jzp , val[find(wi)] %= jzp;
				val[find(qi)] *= base % jzp , val[find(qi)] %= jzp;
				merge(wi , cnt) , merge(qi , cnt);
			}
			else
			{
				int wi = read();
				find(wi);
				printf("%lld\n" , val[wi] * w[n] % jzp);
			}
		}
	}
}

int main()
{
	thecold::main();
	return 0;
}
