#include <cstdio>
#include <algorithm>
#include <cctype>
#include <cstring>
#include <map>
using namespace std;

typedef long long ll;

inline ll read()
{
	ll res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}

const int Max_n = 20;
const int Max_MOD = 2525;
const int Max_m = 50;

int t , MOD , m[Max_m] , tot , num[Max_n] , cnt , mp[Max_MOD];

struct node
{
	ll li , ri;
	node(ll b , ll c)
	{
		li = b , ri = c;
	}
	node() {}
} query[Max_n];

ll ans[Max_n];

int gcd(const int a , const int b)
{
	return b == 0 ? a : gcd(b , a % b);
}

inline int lcm(const int a , const int b)
{
	return a * b /gcd(a , b);
}

void dfs(const int now , const int l)
{
	if(now > 9)
	{
		if(!mp[l])
		{
			mp[l] = ++ tot;
			m[tot] = l;
		}
		return;
	}
	dfs(now + 1 , l);
	dfs(now + 1 , lcm(l , now));
}

inline void sep(ll x)
{
	cnt = 0;
	while(x)
		num[ ++ cnt] = x % 10 , x /= 10;
}

ll hav[Max_n][50][Max_MOD];//50 means which lcm

ll dfs(int pos , bool flag , int cm , int rem)
{
	if(!pos)
		return (rem == 0) && (cm == MOD);
	if(!flag && hav[pos][mp[cm]][rem] != -1)	return hav[pos][mp[cm]][rem];
	int maxnum = (flag ? num[pos] : 9);
	ll ret = 0;
	ret += dfs(pos - 1 , flag && (0 == maxnum) , cm , rem * 10 % MOD);
	for(int i = 1 ; i <= maxnum ; ++ i)
		ret += dfs(pos - 1 , flag && (i == maxnum) , lcm(cm , i) , (rem * 10 + i) % MOD);
	return flag ? ret : hav[pos][mp[cm]][rem] = ret;
}

inline ll solve(ll l , ll r)
{
	ll ret = 0;
	sep(r);
	ret += dfs(cnt , true , 1 , 0);
	-- l;
	sep(l);
	ret -= dfs(cnt , true , 1 , 0);
	return ret;
}
int main()
{
	// freopen("data.in" , "r" , stdin);
	t = read();
	for(int i = 1 ; i <= t ; ++ i)
	{
		ll l = read() , r = read();
		query[i] = node(l , r);
	}
	dfs(1 , 1);
	for(int i = 1 ; i <= tot ; ++ i)
	{
		MOD = m[i];
		memset(hav , -1 , sizeof(hav));
		for(int j = 1 ; j <= t ; ++ j)
			ans[j] += solve(query[j].li , query[j].ri);
	}
	for(int i = 1 ; i <= t ; ++ i)
		printf("%lld\n" , ans[i]);
	return 0;
}
