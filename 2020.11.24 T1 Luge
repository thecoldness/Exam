#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cctype>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 5005;
	const int jzp = 998244353;
	
	struct node
	{
		int nex , to;
		node(int a , int b)
		{
			nex = a , to = b;
		}
		node(){}
	}edge[Max_n * 2];
	
	int head[Max_n] , tot , n , k , siz[Max_n] , base;
	int w[Max_n] , dfn[Max_n] , tim , rev[Max_n] , f[Max_n][Max_n];
	
	inline void add_edge(const int x , const int y)
	{
		edge[ ++ tot] = node(head[x] , y) , head[x] = tot;
		edge[ ++ tot] = node(head[y] , x) , head[y] = tot;
	}
	
	void dfs(const int now , const int from)
	{
		dfn[now] = ++ tim , rev[tim] = now , siz[now] = 1;
		for(int i = head[now] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to;
			if(nex == from)	continue;
			dfs(nex , now);
			siz[now] += siz[nex];
		}
	}
	
	inline int quickpow(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1)
				ret *= x , ret %= jzp;
			x *= x , x %= jzp , y >>= 1;
		}
		return ret;
	}
	
	inline int add(const int x , const int y)
	{
		int ret = x + y;
		if(ret >= jzp)
			ret -= jzp;
		return ret;
	}
	
	inline void main()
	{
		n = read() , k = read();
		for(int i = 1 ; i <= n ; ++ i)
			w[i] = read();
		for(int i = 1 ; i < n ; ++ i)
			add_edge(read() , read());
		if(w[1] > k)
		{
			printf("0");
			return;
		}
		dfs(1 , 0); base = quickpow(2 , jzp - 2);
		f[n + 1][0] = 1;
		for(int i = n ; i > 1 ; -- i)
		{
			int now = rev[i];
			for(int j = k ; j >= w[now] ; -- j)
				f[i][j] = add(f[i][j] , 1ll * f[i + 1][j - w[now]] * base % jzp);
			for(int j = k ; j >= 0 ; -- j)
				f[i][j] = add(f[i][j] , 1ll * f[i + siz[now]][j] * base % jzp);
		}
		printf("%d\n" , f[2][k - w[1]]);
	}
}

int main()
{
	thecold::main();
	return 0;
}
