#include <cctype>
#include <algorithm>
#include <cstdio>
#include <climits>
#include <cstring>
using namespace std;
inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
typedef long long ll;
const int Max_n = 305;
int n , m , t , f[Max_n][Max_n * Max_n];
struct node
{
	int c , v , t;
	node(int ai , int bi , int ci)
	{
		c = ai , v = bi , t = ci;
	}
	node() {}
} a[Max_n];
inline bool cmp(node a , node b)
{
	return a.t < b.t;
}
inline int find_beg(int x)
{
	int l = 1 , r = n , ans = 0;
	while(l <= r)
	{
		int mid = (l + r) >> 1;
		if(a[mid].t <= x)
			ans = mid , l = mid + 1;
		else r = mid - 1;
	}
	return ans;
}
inline int dfs_ans(int beg , int mon)
{
	int l = 0 , r = 300 * 300 , ans = 0;
	while(l <= r)
	{
		int mid = (l + r) >> 1;
		if(f[beg][mid] <= mon)	l = mid + 1 , ans = mid;
		else r = mid - 1;
	}
	return ans;
}
int main()
{
	n = read() , m = read();
	for(int i = 1 ; i <= n ; ++ i)
	{
		int ui = read() , vi = read() , ti = read();
		a[i] = node(ui , vi , ti);
	}
	memset(f , 0x3f , sizeof(f));
	f[0][0] = 0;
	sort(a + 1 , a + n + 1 , cmp);
	for(int i = 1 ; i <= n ; ++ i)
		for(int j = 0 ; j <= 300 * 300 ; ++ j)
		{
			f[i][j] = f[i - 1][j];
			if(j >= a[i].v)	f[i][j] = min(f[i][j] , f[i - 1][j - a[i].v] + a[i].c);
		}
	for(int i = 1 ; i <= n ; ++ i)
	{
		int minn = INT_MAX;
		for(int j = 300 * 300 ; j ; -- j)
		{
			f[i][j] = min(f[i][j] , minn);
			minn = min(f[i][j] , minn);
		}
	}
	for(int i = 1 ; i <= m ; ++ i)
	{
		t = read();
		int mon = read();
		int beg = find_beg(t);
		printf("%d\n" , dfs_ans(beg , mon));
	}
	return 0;
}
