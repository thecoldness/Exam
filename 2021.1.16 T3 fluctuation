#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <vector>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}
	
	const int Max_n = 2e5 + 5e4 + 5;
	
	inline int lowbit(const int x)
	{
		return x & -x;
	}
	
	int n , a[Max_n] , head[Max_n] , tot , bit[2][Max_n] , st[2][Max_n];
	int siz[Max_n] , l , r , root , mx[Max_n] , dep[Max_n];
	
	ll ans;
	
	inline void add(int pos , const int type , const int val)
	{
		++ pos;
//		for(int i = pos ; i <= n ; ++ i) bug
//		for(int i = pos ; i <= n ; i += lowbit(i)) bug
		for(int i = pos ; i <= n + 1 ; i += lowbit(i))
			bit[type][i] += val;
	}
	
	inline int query(int pos , const int type)
	{
		int ret = 0; ++ pos;
		for(int i = pos ; i ; i -= lowbit(i))
			ret += bit[type][i];
		return ret;
	}
	
	struct node
	{
		int nex , to;
		node(int a , int b)
		{
			nex = a , to = b;
		}
		node(){}
	}edge[Max_n << 1];
	
	inline void add_edge(const int x , const int y)
	{
		edge[ ++ tot] = node(head[x] , y) , head[x] = tot;
		edge[ ++ tot] = node(head[y] , x) , head[y] = tot;
	}
	
	bool vis[Max_n];
	
	void dfs_root(const int now , const int from , const int all)
	{
		siz[now] = 1 , mx[now] = 0;
		for(int i = head[now] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to; if(nex == from || vis[nex]) continue;
			dfs_root(nex , now , all) , siz[now] += siz[nex] , mx[now] = max(mx[now] , siz[nex]);
		}
		mx[now] = max(mx[now] , all - siz[now]);
		if(mx[now] < mx[root]) root = now;
	}
	
	inline int get_sum(const int l , const int r , const bool type)
	{
//		if(l >= r || r < 0) return 0; bug
		if(l > r || r < 0) return 0;
		if(l <= 0) return query(r , type);
		return query(r , type) - query(l - 1 , type);
	}
	
	void dfs_val(const int now , const int from , const bool type , const bool lst , const int val , const int len)
	{
		if(len >= 2 && val >= l && val <= r) ++ ans;
		if(type)
			ans += get_sum(l - val , r - val , 0) + get_sum(l - val - 1 , r - val - 1 , 1);
		else ans += get_sum(l - val , r - val , 0) + get_sum(l - val , r - val , 1);
		for(int i = head[now] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to; if(nex == from || vis[nex]) continue;
			if((a[nex] < a[now]) && lst) dfs_val(nex , now , type , false , val + 1 , len + 1);
			else dfs_val(nex , now , type , a[nex] > a[now] , val , len + 1);
		}
//		add(val , type , 1) , st[type][ ++ st[type][0]] = val; bug
		st[type][ ++ st[type][0]] = val;
	}
	
	void solve(const int now , const int all)
	{
		root = 0 , dfs_root(now , 0 , all) , vis[root] = true;
		for(int i = head[root] ; i ; i = edge[i].nex)
		{
			int lst0 = st[0][0] , lst1 = st[1][0];
			int nex = edge[i].to; if(vis[nex]) continue;
//			dfs_val(nex , root , a[now] > a[nex] , a[nex] > a[now] , 0 , 1); bug
			dfs_val(nex , root , a[root] > a[nex] , a[nex] > a[root] , 0 , 1);
			for(int j = lst0 + 1 ; j <= st[0][0] ; ++ j)
				add(st[0][j] , 0 , 1);
			for(int j = lst1 + 1 ; j <= st[1][0] ; ++ j)
				add(st[1][j] , 1 , 1);
		}
		for(int i = 1 ; i <= st[0][0] ; ++ i)
			add(st[0][i] , 0 , -1);
		for(int i = 1 ; i <= st[1][0] ; ++ i)
			add(st[1][i] , 1 , -1);
		st[0][0] = st[1][0] = 0; // bug
		for(int i = head[root] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to;
			if(!vis[nex]) solve(nex , siz[nex]);
		}
	}
	
	inline void main()
	{
		n = read() , l = read() , r = read() , mx[0] = n + 5;
		for(int i = 1 ; i <= n ; ++ i)
			a[i] = read();
		for(int i = 1 ; i < n ; ++ i)
			add_edge(read() , read());
		solve(1 , n);
		printf("%lld\n" , ans);
	}
}

int main()
{
//	freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
/*
3 1 5
4 2 4 
1 2
2 3
ans = 0
4 1 5
2 4 4 1 
1 2
1 3
2 4
ans = 2	
5 1 1
2 3 1 2 2 
1 2
2 3
2 4
1 5
ans = 5
6 1 6
3 2 3 5 4 3 
1 2
2 3
3 4
3 5
2 6
ans = 0
*/
