#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline ll read()
	{
		ll res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}

	const int Max_n = 1e5 + 5;

	int logm[Max_n] , n;

	ll ans , f[Max_n][20] , m;

	inline void build()
	{
		for(int j = 1 ; j <= logm[n] ; ++ j)
			for(int i = 1 ; i <= n ; ++ i)
				if(i + (1 << j) - 1 <= n)
					f[i][j] = f[i][j - 1] | f[i + (1 << (j - 1))][j - 1];
	}

	inline ll check(const int l , const int r)
	{
		int len = r - l + 1;
		return (f[l][logm[len]] | f[r - (1 << logm[len]) + 1][logm[len]]) < m;
	}

	inline void main()
	{
		// freopen("data.in" , "r" , stdin);
		n = read() , m = read();
		for(int i = 1 ; i <= n ; ++ i)
			f[i][0] = read();
		for(int i = 2 ; i <= n ; ++ i)
			logm[i] = logm[i / 2] + 1;
		build();
		for(int i = 1 ; i <= n ; ++ i)
		{
			if(f[i][1] >= m)
				continue;
			int l = i , r = n , pos = l - 1;
			while(l <= r)
			{
				int mid = (l + r) >> 1;
				if(check(i , mid))
					l = mid + 1 , pos = mid;
				else r = mid - 1;
			}
			ans += (pos - i);
		}
		printf("%lld\n" , ans);
	}
}

int main()
{
	thecold::main();
	return 0; 
}
