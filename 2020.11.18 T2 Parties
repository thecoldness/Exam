#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
using namespace std;

namespace thecold
{
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}

	const int Max_n = 25;

	int edge[Max_n] , n , m , opt[Max_n] , len = Max_n;
	int ans[Max_n];

	inline bool check()
	{
		for(int i = 0 ; i < n ; ++ i)
			if(edge[i] != (1 << n) - 1)
				return false;
		return true;
	}

	void dfs(const int now , const int choose)
	{
		if(choose > len)	return;
		if(check())
		{
			if(choose < len)
			{
				memcpy(ans , opt , sizeof(ans));
				len = choose;
			}
			else
			{
				for(int i = 1 ; i <= len ; ++ i)
				{
					if(opt[i] > ans[i])	break;
					if(opt[i] < ans[i])
					{
						memcpy(ans , opt , sizeof(ans));
						break;
					}
				}
			}
			return;
		}
		if(now == n)	return;
		dfs(now + 1 , choose);
		int tmp[Max_n];
		memcpy(tmp , edge , sizeof(tmp));
		for(int i = 0 ; i < n ; ++ i)
			if(edge[now] & (1 << i))
				edge[i] |= edge[now];
		opt[choose + 1] = now;
		dfs(now + 1 , choose + 1);
		opt[choose + 1] = 0;
		memcpy(edge , tmp , sizeof(tmp));
	}

	inline void main()
	{
		n = read() , m = read();
		for(int i = 0 ; i < n ; ++ i)
			edge[i] |= 1 << i;
		for(int i = 1 ; i <= m ; ++ i)
		{
			int ui = read() , vi = read();
			edge[ui - 1] |= (1 << (vi - 1));
			edge[vi - 1] |= (1 << (ui - 1));
		}
		dfs(0 , 0);
		printf("%d\n" , len);
		for(int i = 1 ; i <= len ; ++ i)
			printf("%d " , ans[i] + 1);
	}
}

int main()
{
	thecold::main();
	return 0;
}
