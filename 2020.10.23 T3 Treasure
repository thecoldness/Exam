#include <cstdio>
#include <cctype>
#include <cstring>
#include <algorithm>
#include <bitset>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}

	const int Max_n = 505;

	int n , m;

	ll ans;

	struct Matrix
	{
		bitset<Max_n> h[Max_n];

		inline bitset<Max_n> &operator[](const int a)
		{
			return h[a];
		}

		inline void clean()
		{
			for(int i = 1 ; i <= n ; ++ i)
				h[i].reset();
		}

	} f[65][2];

	Matrix operator * (Matrix a , Matrix b)
	{
		Matrix ret;
		ret.clean();
		bitset<Max_n> tmp[Max_n];
		for(int i = 1 ; i <= n ; ++ i)
			for(int j = 1 ; j <= n ; ++ j)
				tmp[i][j] = b[j][i];
		for(int i = 1 ; i <= n ; ++ i)
			for(int j = 1 ; j <= n ; ++ j)
				ret[i][j] = (a[i] & tmp[j]).any();
		return ret;
	}

	inline void build()
	{
		for(int i = 1 ; i <= 60 ; ++ i)
		{
			f[i][0] = f[i - 1][0] * f[i - 1][1];
			f[i][1] = f[i - 1][1] * f[i - 1][0];
		}
	}

	inline ll quickpow(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1)
				ret *= x;
			x *= x , y >>= 1;
		}
		return ret;
	}

	inline void check_ans()
	{
		bool hav_ans = true;
		for(int i = 1 ; i <= n ; ++ i)
			if(f[0][0][1][i])
			{
				hav_ans = true;
				break;
			}
		if(!hav_ans)
		{
			printf("0");
			exit(0);
		}
		for(int i = 1 ; i <= n ; ++ i)
			if(f[60][0][1][i])
			{
				printf("-1");
				exit(0);
			}
	}

	inline void main()
	{
		// freopen("data.in" , "r" , stdin);
		n = read() , m = read();
		for(int i = 1 ; i <= m ; ++ i)
		{
			int ui = read() , vi = read() , col = read();
			if(col == 1)
				f[0][1][ui][vi] = 1;
			else f[0][0][ui][vi] = 1;
		}
		build();
		check_ans();
		Matrix beg;
		beg.clean();
		for(int i = 1 ; i <= n ; ++ i)
			beg[i][i] = 1;
		int rev = 0;
		for(int i = 60 ; i >= 0 ; -- i)
		{
			Matrix tmp = beg * f[i][rev];
			for(int j = 1 ; j <= n ; ++ j)
				if(tmp[1][j])
				{
					rev ^= 1;
					ans += quickpow(2 , i);
					beg = tmp;
					break;
				}
			if(ans > (ll)1e18)
			{
				printf("-1");
				exit(0);
			}
		}
		printf("%lld\n" , ans);
	}
}

int main()
{
	thecold::main();
	return 0;
}
