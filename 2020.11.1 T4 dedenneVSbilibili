#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <bitset>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline ll read()
	{
		ll res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}

	const int Max_n = 1e4 + 5;
	const int Max_w = 1e6 + 5;

	bitset<Max_w> bag;

	int n , ct , d[Max_n] , mp[Max_n], v[Max_n * 15] , w[Max_n * 15];
	int tot , prime[Max_n] , mindiv[Max_n] , top;

	ll wi , a[Max_n] , ans;

	inline void pre_work()
	{
		for(int i = 2 ; i <= n ; ++ i)
		{
			if(!mindiv[i])
				prime[ ++ tot] = i , mindiv[i] = i;
			for(int j = 1 ; j <= tot && (i * prime[j] <= n) ; ++ j)
			{
				mindiv[i * prime[j]] = prime[j];
				if(i % prime[j] == 0)
					break;
			}
		}
	}

	inline void main()
	{
		n = read() , wi = read() , ct = read();
		for(int i = 1 ; i <= ct ; ++ i)
			d[i] = read() , mp[d[i]] = i;
		for(int i = 1 ; i <= ct ; ++ i)
			a[i] = read();
		pre_work();
		for(int i = 1 ; i < ct ; ++ i)
		{
			int mind = mindiv[n / d[i]] , nex = mp[d[i] * mind];
			a[i] -= mind - 1;
			a[nex] += a[i] / mind , a[i] %= mind;
			a[i] += mind - 1;
		}
		for(int i = 1 ; i < ct ; ++ i)
		{
			ll tmp = 1;
			while(a[i] >= tmp)
			{
				v[ ++ top] = d[i] * tmp , w[top] = d[i] * tmp;
				a[i] -= tmp , tmp <<= 1;
			}
			if(a[i])
				v[ ++ top] = d[i] * a[i] , w[top] = a[i] * d[i];
		}
		bag.set(0);
		for(int i = 1 ; i <= top ; ++ i)
			bag = bag | (bag << w[i]);
		for(int i = 0 ; i <= min((ll)1e6 , wi) ; ++ i)
		{
			if(!bag[i])
				continue;
			ll tmp = i + (ll)min((wi - i) / n , a[mp[n]]) * n;
			ans = max(tmp , ans);
		}
		printf("%lld\n" , ans);
	}
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
/*
3 20 2
1 3 
4 5

19

4 9 3
1 2 4 
3 0 2 

9

4 20 3
1 2 4 
5 5 4 

20
*/
