#include <cstdio>
#include <cctype>
#include <cstring>
#include <algorithm>
#include <cmath>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline int read()
	{
		int res = 0;bool flag = false;
		char c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 5e4 + 5;
	
	int prime[Max_n] , tot , t , n , tmp , ans;
	
	inline int check_ans(const int x)
	{
		int tmp = sqrt(x);
//		return tmp * tmp == x; bug
		return tmp * tmp == x && x;
	}
	
	inline void check(const int x)
	{
		int rem = n / x;
		for(int i = 1 ; i * i <= rem / 2 ; ++ i)
			ans += check_ans(rem - i * i);
	}
	
	inline void dfs(const int now , const int val)
	{
		if(now > tot)
		{
			check(val); return;
		}
		dfs(now + 1 , val) , dfs(now + 1 , val * prime[now]);
	}
	
	inline void main()
	{
		t = read();
		while(t --)
		{
			n = read() , tot = ans = 0;
			if(n % 2)
			{
				puts("0"); continue;
			}
			tmp = (n >>= 1);
			for(int i = 2 ; i * i <= tmp ; ++ i)
			{
				if(tmp % i)	continue;
				prime[ ++ tot] = i;
				while(tmp % i == 0)	tmp /= i;
			}
			if(tmp != 1) prime[ ++ tot] = tmp;// bug
			dfs(1 , 1);
			printf("%d\n" , ans);
		}
	}
}

int main()
{
	thecold::main();
	return 0;
}
