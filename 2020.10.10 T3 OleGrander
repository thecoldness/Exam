#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
using namespace std;

typedef long long ll;

inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}

const int Max_n = 1e5 + 5;
const int MOD = 998244353;

int n , m , cg[Max_n] , val[Max_n];

struct node
{
	int l , r , XOR , OR , p1 , tag;
	node(int a , int b)
	{
		l = a , r = b , XOR = OR = p1 = tag = 0;
	}
	node() {}
} tree[Max_n << 2];

inline void push_up(const int tr)
{
	tree[tr].XOR = tree[tr * 2].XOR ^ tree[tr * 2 + 1].XOR;
	tree[tr].OR = tree[tr * 2].OR | tree[tr * 2 + 1].OR;
	tree[tr].p1 = tree[tr * 2].p1 | tree[tr * 2 + 1].p1;
}

void build(const int l , const int r , const int tr)
{
	tree[tr] = node(l , r);
	if(l == r)
	{
		if(cg[l] == 0)
		{
			tree[tr].OR = val[l];
			for(int i = 0 ; i <= 30 ; ++ i)
				if(!(val[l] & (1 << i)))
					tree[tr].p1 |= (1 << i);
		}
		tree[tr].XOR = val[l];
		return;
	}
	int mid = (l + r) >> 1;
	build(l , mid , tr * 2);
	build(mid + 1 , r , tr * 2 + 1);
	push_up(tr);
}

inline void push_down(const int tr)
{
	if(!tree[tr].tag)	return;
	tree[tr * 2].tag ^= tree[tr].tag , tree[tr * 2 + 1].tag ^= tree[tr].tag;
	if((tree[tr * 2].r - tree[tr * 2].l + 1) % 2 == 1)
		tree[tr * 2].XOR ^= tree[tr].tag;
	if((tree[tr * 2 + 1].r - tree[tr * 2 + 1].l + 1) % 2 == 1)
		tree[tr * 2 + 1].XOR ^= tree[tr].tag;
	for(int i = 0 ; i <= 30 ; ++ i)
	{
		if(!(tree[tr].tag & (1 << i)))	continue;
		int o = tree[tr * 2].OR & (1 << i) , p = tree[tr * 2].p1 & (1 << i);
		tree[tr * 2].OR ^= (o ^ p) , tree[tr * 2].p1 ^= (o ^ p);
		o = tree[tr * 2 + 1].OR & (1 << i) , p = tree[tr * 2 + 1].p1 & (1 << i);
		tree[tr * 2 + 1].OR ^= (o ^ p) , tree[tr * 2 + 1].p1 ^= (o ^ p);
	}
	tree[tr].tag = 0;
}

int query_or(const int l , const int r , const int tr)
{
	int ll = tree[tr].l , rr = tree[tr].r;
	if(ll > r || rr < l)
		return 0;
	if(l <= ll && rr <= r)
		return tree[tr].OR;
	push_down(tr);
	return query_or(l , r , tr * 2) | query_or(l , r , tr * 2 + 1);
}

int query_xor(const int l , const int r , const int tr)
{
	int ll = tree[tr].l , rr = tree[tr].r;
	if(ll > r || rr < l)	return 0;
	if(l <= ll && rr <= r)
		return tree[tr].XOR;
	push_down(tr);
	return query_xor(l , r , tr * 2) ^ query_xor(l , r , tr * 2 + 1);
}

inline int quickpow(ll x , int y)
{
	ll ret = 1;
	while(y)
	{
		if(y & 1)	ret *= x , ret %= MOD;
		x *= x , x %= MOD;
		y >>= 1;
	}
	return ret;
}

void change(const int l , const int r , const int val , const int tr)
{
	int ll = tree[tr].l , rr = tree[tr].r;
	if(ll > r || rr < l)	return;
	if(l <= ll && rr <= r)
	{
		tree[tr].tag ^= val;
		if((rr - ll + 1) % 2 == 1)
			tree[tr].XOR ^= val;
		for(int i = 0 ; i <= 30 ; ++ i)
		{
			if(!(val & (1 << i)))	continue;
			int o = tree[tr].OR & (1 << i) , p = tree[tr].p1 & (1 << i);
			tree[tr].OR ^= (o ^ p) , tree[tr].p1 ^= (o ^ p);
		}
		return;
	}
	push_down(tr);
	change(l , r , val , tr * 2);
	change(l , r , val , tr * 2 + 1);
	push_up(tr);
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	n = read() , m = read();
	for(int i = 1 ; i <= n ; ++ i)
		cg[i] = read();
	for(int i = 1 ; i <= n ; ++ i)
		val[i] = read();
	build(1 , n , 1);
	while(m --)
	{
		int opt = read() , l = read() , r = read();
		if(opt % 2 == 0)
		{
			int ans_or = query_or(l , r , 1) , ans_xor = query_xor(l , r , 1);
			ll ret = 0;
			for(int i = 1 ; i <= 30 ; ++ i)
			{
				if(!(ans_or & (1 << i)))	continue;
				ll tmp_ans = (((ans_xor >> i) ^ 1) << i) % MOD;
				ret += tmp_ans * quickpow(2 , i) % MOD , ret %= MOD;
				ret += (ll)(quickpow(2 , i) - 1) * (quickpow(2 , i - 1)) % MOD , ret %= MOD;
			}
			if(ans_or & 1)	ret += (ans_xor ^ 1) , ret %= MOD;
			printf("%lld\n" , (ret + MOD) %MOD);
		}
		else
		{
			int yi = read();
			change(l , r , yi , 1);
		}
	}
	return 0;
}

/*
4 3
1 1 0 0
8 6 10 9
1 1 1 6
1 4 4 7
0 1 3

93

5 2
0 0 0 0 0
10 10 7 7 4
1 2 4 3
0 1 5

113

3 3
1 0 1
7 4 7
1 1 3 10
0 2 3
1 1 1 7

115
*/
