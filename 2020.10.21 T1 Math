#include <cstdio>
#include <cctype>
#include <cstring>
#include <algorithm>
#include <cmath>
using namespace std;

typedef long long ll;

inline ll read()
{
	ll res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}

ll n , m;

const int Max_n = 1e7 + 5;

int tot , prime[Max_n] , mindiv[Max_n];

inline int quickpow(int x , int y)
{
	ll ret = 1;
	while(y)
	{
		if(y & 1)
			ret *= x;
		x *= x , y >>= 1;
	}
	return ret;
}

inline int divide(int x)
{
	int ret = 1;
	while(x != 1)
	{
		int tmp = mindiv[x] , cnt = 0;
		while(x % tmp == 0)
			++ cnt , x /= tmp;
		ret *= quickpow(tmp , cnt / 2);
	}
	return ret;
}

int ans;

inline void pre_work()
{
	for(int i = 2 ; i <= n ; ++ i)
	{
		if(!mindiv[i])
			prime[ ++ tot] = i , mindiv[i] = i;
		for(int j = 1 ; j <= tot && (ll)i * prime[j] <= n ; ++ j)
		{
			mindiv[i * prime[j]] = prime[j];
			if(i % prime[j] == 0)
				break;
		}
	}
}

int main()
{
	n = read() , m = read();
	pre_work();

	for(int i = 1 ; i <= n ; ++ i)
	{
		int ret = i / (divide(i) * divide(i));
		if(((ll)sqrt(m / ret)) % 2)
			-- ans;
		else ++ ans;
	}
	printf("%d\n" , ans);
	return 0;
}
