#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
using namespace std;

typedef long long ll;

inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}

const int Max_n = 55;
const int Max_m = 25;

int a[Max_n][Max_m] , n , m;
ll h[1 << (Max_m - 3)] , k[1 << (Max_m - 3)] , s[1 << (Max_m - 3)];

long double f[1 << (Max_m - 3)];

inline int lowbit(const int x)
{
	return x & -x;
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	n = read() , m = read();
	for(int i = 0 ; i < n ; ++ i)
		for(int j = 0 ; j < m ; ++ j)
			a[i][j] = read();
	for(int i = 0 ; i < n ; ++ i)
	{
		memset(k , 0 , sizeof(k)) , memset(h , 0 , sizeof(h));
		h[0] = k[0] = (1ll << n) - 1;
		for(int j = 0 ; j < m ; ++ j)
			for(int l = 0 ; l < n ; ++ l)
				if(l != i && a[l][j] == a[i][j])
					h[1 << j] |= (1ll << l);
		for(int j = 1 ; j < 1 << m ; ++ j)
			k[j] = k[j - lowbit(j)] & h[lowbit(j)];
		for(int j = 0 ; j < 1 << m ; ++ j)
			if(k[j] & (~ (1ll << i)))
				++ s[j];
	}
	for(int i = (1 << m) - 2 ; i >= 0 ; -- i)
	{
		if(!s[i])
			continue;
		int cnt = 0;
		for(int j = 0 ; j < m ; ++ j)
			if(!(i & (1 << j)))
				++ cnt , f[i] += f[i | (1 << j)] * s[i | (1 << j)] / s[i];
		f[i] /= cnt , f[i] += 1;
	}
	printf("%.5Lf\n", f[0]);
	return 0;
}
