#include <cstdio>
#include <cctype>
#include <algorithm>
#include <cstring>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 1e5 + 5;
	
	ll lsh[Max_n] , pre[Max_n] , ans;
	
	int n , a[Max_n] , m , tree[Max_n] , len;
	
	inline int lowbit(const int x)
	{
		return x & -x;
	}
	
	inline void add(const int pos , const int val)
	{
		for(int i = pos ; i <= len ; i += lowbit(i))
			tree[i] += val;
	}
	
	inline int query(const int pos)
	{
		int ret = 0;
		for(int i = pos ; i ; i -= lowbit(i))
			ret += tree[i];
		return ret;
	}
	
	inline int find(const ll x)
	{
		return lower_bound(lsh + 1 , lsh + len , x) - lsh;
	}
	
	inline void main()
	{
		n = read() , m = read();
		for(int i = 1 ; i <= n ; ++ i)
			a[i] = read() - m , pre[i] = pre[i - 1] + a[i];
		for(int i = 1 ; i <= n ; ++ i)
			lsh[i] = pre[i];
		sort(lsh + 1 , lsh + n + 2);
		len = unique(lsh + 1 , lsh + n + 2) - lsh;
		for(int i = 0 ; i <= n ; ++ i)
			pre[i] = find(pre[i]);
		for(int i = 1 ; i <= n ; ++ i)
		{
			add(pre[i - 1] , 1);
			ans += query(pre[i] - 1);
		}
		printf("%lld\n" , ans);
	}
}

int main()
{
	freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
