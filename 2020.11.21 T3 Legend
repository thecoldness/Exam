#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}

	const int Max_n = 105;
	const int Max_m = 1005;
	const int jzp = 998244353;

	int n , a , m;

	inline ll quickpow(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1)
				ret *= x , ret %= jzp;
			x *= x , x %= jzp , y >>= 1;
		}
		return ret;
	}

	int f[Max_n][Max_m] , g[Max_n][Max_m] , sum[Max_n][Max_m];

	ll ans;

	inline int add(const int x , const int y)
	{
		int ret = x + y;
		if(ret >= jzp)
			ret -= jzp;
		return ret;
	}

	inline void calc(const int x)
	{
		memcpy(g , f , sizeof(g)) , memset(f , 0 , sizeof(f));
		memset(sum , 0 , sizeof(sum));
		f[0][0] = 1;
		for(int i = 0 ; i <= m ; ++ i)
			sum[0][i] = 1;
		for(int i = 1 ; i <= n ; ++ i)
			for(int j = 0 ; j <= m ; ++ j)
			{
				if(j)	f[i][j] = (sum[i - 1][j - 1] - ((j - x - 1) >= 0 ? sum[i - 1][j - x - 1] : 0) + jzp) % jzp;
				f[i][j] = add(f[i][j] , 1ll * (a - x) * f[i - 1][j] % jzp);
				sum[i][j] = j ? add(sum[i][j - 1] , f[i][j]) : f[i][j];
			}
	}

	inline void main()
	{
		n = read() , m = read() , a = read();
		calc(0);
		for(int val = 1 ; val <= a ; ++ val)
		{
			calc(val);
			for(int pos = 1 ; pos <= n ; ++ pos)
				for(int j = m - val ; j >= 0 ; -- j)
					ans = add(ans , 1ll * g[n - pos][j] * sum[pos - 1][m - val - j] % jzp);
		}
		ans = 1ll * ans * quickpow(quickpow(a , n) , jzp - 2) , ans %= jzp;
		printf("%lld\n" , ans);
	}
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
