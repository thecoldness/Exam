#include <cstdio>
#include <cctype>
#include <cstring>
#include <algorithm>
#include <climits>
#include <vector>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline ll read()
	{
		ll res = 0;
		bool flag = false;
		char c;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}

	const int Max_n = 2e3 + 5;

	struct node
	{
		int from , to , val;
		node(int a , int b , int c)
		{
			from = a , to = b , val = c;
		}
		node(){}
	}edge[Max_n * Max_n] , mst[Max_n];

	int xi[Max_n] , yi[Max_n] , ci[Max_n] , fa[Max_n] , tot;
	int n , m , tp;

	ll ans;

	int find(const int x)
	{
		return fa[x] == x ? x : fa[x] = find(fa[x]);
	}

	inline void merge(const int x , const int y)
	{
		fa[find(x)] = find(y);
	}

	vector<int> v[Max_n];

	inline int dist(const int x , const int y)
	{
		return (xi[x] - xi[y]) * (xi[x] - xi[y]) + (yi[x] - yi[y]) * (yi[x] - yi[y]);
	}

	inline bool cmp(node a , node b)
	{
		return a.val < b.val;
	}

	inline void check(const int x)
	{
		ll ret = 0 , cnt = 0;
		for(int i = 1 ; i <= m ; ++ i)
			if(x & (1 << (i - 1)))
				ret += ci[i];
		if(ret >= ans)	return;
		for(int i = 1 ; i <= n ; ++ i)
			fa[i] = i;
		for(int i = 1 ; i <= m ; ++ i)
			if(x & (1 << (i - 1)))
			{
				int sz = v[i].size();
				for(int j = 1 ; j < sz ; ++ j)
				{
					if(find(v[i][j]) == find(v[i][0]))	continue;
					merge(v[i][j] , v[i][0]);
					++ cnt;
				}
			}
		for(int i = 1 ; i <= tp ; ++ i)
		{
			int nowx = mst[i].from , nowy = mst[i].to , va = mst[i].val;
			if(find(nowx) == find(nowy))	continue;
			ret += va , ++ cnt;
			merge(nowx , nowy);
			if(cnt == n - 1)
				break;
		}
		ans = min(ans , ret);
	}

	inline void main()
	{
		n = read() , m = read();
		for(int i = 1 ; i <= n ; ++ i)
			xi[i] = read() , yi[i] = read() , fa[i] = i;
		for(int i = 1 ; i <= n ; ++ i)
			for(int j = i + 1 ; j <= n ; ++ j)
				edge[ ++ tot] = node(i , j , dist(i , j));
		sort(edge + 1 , edge + tot + 1 , cmp);
		int cnt = 0;
		for(int i = 1 ; i <= tot ; ++ i)
		{
			int nowx = edge[i].from , nowy = edge[i].to;
			if(find(nowx) == find(nowy))	continue;
			++ cnt , ans += edge[i].val;
			merge(nowx , nowy);
			mst[ ++ tp] = edge[i];
			if(cnt == n - 1)
				break;
		}
		for(int i = 1 ; i <= m ; ++ i)
		{
			int ui = read();
			ci[i] = read();
			for(int j = 1 ; j <= ui ; ++ j)
				v[i].push_back(read());
		}
		for(int i = 1 ; i < (1 << m) ; ++ i)
			check(i);
		printf("%lld\n" , ans);
	}
}

int main()
{
	thecold::main();
	return 0;
}
/*
7 3
0 2
4 0
2 0
4 2
1 3
0 5
4 4
2 4 1 2
3 3 6 3 7
3 9 5 4 2
*/
