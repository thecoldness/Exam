#include <cstdio>
#include <cctype>
#include <cstring>
#include <climits>
#include <algorithm>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline ll read()
	{
		ll res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}
	
	const int Max_n = 5e4 + 5;
	
	int n , son[Max_n][2] , root , lx[Max_n][3] , rx[Max_n][3] , dem , tot;
	
	ll mx[Max_n] , val[Max_n] , ans[Max_n] , query_val , value[Max_n] , lsh[4][Max_n] , a[Max_n][4];
	
	struct node
	{
		int h[4] , id;
		
		int& operator[] (const int a)
		{
			return h[a];
		}
		
		bool operator == (const node &a) const
		{
			return id == a.id;
		}
	}s[Max_n] , rev[Max_n];
	
	inline int add(const int x)
	{
		int ret = x + 1;
		if(ret >= 4)	ret -= 4;
		return ret;
	}
	
	inline bool cmp(node a , node b)
	{
//		if(a[dem] != a[dem])	return a[dem] < b[dem]; bug
		if(a[dem] != b[dem]) return a[dem] < b[dem];
		return a.id < b.id;
	}
	
	inline void push_up(const int now)
	{
		lx[now][0] = min(lx[now][0] , min(lx[son[now][0]][0] , lx[son[now][1]][0]));
		lx[now][1] = min(lx[now][1] , min(lx[son[now][0]][1] , lx[son[now][1]][1]));
		lx[now][2] = min(lx[now][2] , min(lx[son[now][0]][2] , lx[son[now][1]][2]));
		rx[now][0] = max(rx[now][0] , max(rx[son[now][0]][0] , rx[son[now][1]][0]));
		rx[now][1] = max(rx[now][1] , max(rx[son[now][0]][1] , rx[son[now][1]][1]));
		rx[now][2] = max(rx[now][2] , max(rx[son[now][0]][2] , rx[son[now][1]][2]));
	}
	
	void build(const int l , const int r , int &now , const int type)
	{
		if(l > r) return;
		now = ++ tot;
		if(l == r)
		{
			rev[now] = s[l] , lx[now][0] = rx[now][0] = s[l][0];
			lx[now][1] = rx[now][1] = s[l][1] , lx[now][2] = rx[now][2] = s[l][2];
			return;
		}
		dem = type; int mid = (l + r) >> 1;
		nth_element(s + l , s + mid , s + r + 1 , cmp);
		rev[now] = s[mid] , lx[now][0] = rx[now][0] = s[mid][0];
		lx[now][1] = rx[now][1] = s[mid][1] , lx[now][2] = rx[now][2] = s[mid][2];
		build(l , mid - 1 , son[now][0] , add(type)) , build(mid + 1 , r , son[now][1] , add(type));
		push_up(now);
	}
	
	void query(const int now , node lim)
	{
//		if((lx[now][0] > lim[0] && lx[now][1] > lim[1] && lx[now][2] > lim[2]) || mx[now] <= query_val) return;bug
		if((lx[now][0] > lim[0] || lx[now][1] > lim[1] || lx[now][2] > lim[2]) || mx[now] <= query_val) return;
		if(rx[now][0] <= lim[0] && rx[now][1] <= lim[1] && rx[now][2] <= lim[2]) return query_val = max(mx[now] , query_val) , void();
		if(rev[now][0] <= lim[0] && rev[now][1] <= lim[1] && rev[now][2] <= lim[2]) query_val = max(query_val , value[now]);// bug
		if(son[now][0]) query(son[now][0] , lim);
		if(son[now][1]) query(son[now][1] , lim);
	}
	
	void active(const int now , const int type , node lim , const ll val)
	{
		if(rev[now] == lim) return mx[now] = max(mx[now] , val) , value[now] = val , void();
//		if(lim[type] < rev[now][type]) active(now * 2 , add(type) , lim , val);bug
		if(lim[type] < rev[now][type] || (lim[type] == rev[now][type] && lim.id < rev[now].id))	
			active(son[now][0] , add(type) , lim , val);
		else active(son[now][1] , add(type) , lim , val);
		mx[now] = max(value[now] , max(mx[son[now][0]] , mx[son[now][1]]));
	}
	
	inline int find(const ll x , const int type)
	{
		return lower_bound(lsh[type] + 1 , lsh[type] + lsh[type][0] , x) - lsh[type];
	}
	
	inline void pre_work()
	{
		sort(lsh[0] + 1 , lsh[0] + lsh[0][0] + 1) , lsh[0][0] = unique(lsh[0] + 1 , lsh[0] + lsh[0][0] + 1) - lsh[0];
		sort(lsh[1] + 1 , lsh[1] + lsh[1][0] + 1) , lsh[1][0] = unique(lsh[1] + 1 , lsh[1] + lsh[1][0] + 1) - lsh[1];
		sort(lsh[2] + 1 , lsh[2] + lsh[2][0] + 1) , lsh[2][0] = unique(lsh[2] + 1 , lsh[2] + lsh[2][0] + 1) - lsh[2];
		sort(lsh[3] + 1 , lsh[3] + lsh[3][0] + 1) , lsh[3][0] = unique(lsh[3] + 1 , lsh[3] + lsh[3][0] + 1) - lsh[3];
		for(int i = 1 ; i <= n ; ++ i)
			for(int j = 0 ; j < 4 ; ++ j)
				s[i][j] = find(a[i][j] , j);
	}

	inline void main()
	{
		n = read(); lx[0][0] = lx[0][1] = lx[0][2] = INT_MAX; rx[0][0] = rx[0][1] = rx[0][2] = -INT_MAX;
		for(int i = 1 ; i <= n ; ++ i)
		{
			for(int j = 0 ; j < 4 ; ++ j)
				a[i][j] = read() , lsh[j][ ++ lsh[j][0]] = a[i][j];
			val[i] = read() , s[i].id = i;
		}
		pre_work();
		build(1 , n , root , 0);
		dem = 3;
		sort(s + 1 , s + n + 1 , cmp);
		for(int i = 1 ; i <= n ; ++ i)
		{
			query_val = 0 , query(1 , s[i]);
			ans[i] = query_val + val[s[i].id];
			active(root , 0 , s[i] , ans[i]);
		}
		ll ret = -LLONG_MAX;
		for(int i = 1 ; i <= n ; ++ i)
			ret = max(ret , ans[i]);
		printf("%lld\n" , ret);
	}
}

int main()
{
//	freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
/*
4
-2 4 0 -3 1
-4 -1 -3 -2 2
3 5 -1 4 4
-4 -3 -4 0 8
ans = 12
*/
