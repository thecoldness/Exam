#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
using namespace std;

namespace thecold
{
	typedef long long ll;
	
	inline int read()
	{
		int res = 0;
		char c;
		bool flag = false;
		c = getchar();
		while(!isdigit(c))
		{
			flag = (c == '-');
			c = getchar();
		}
		while(isdigit(c))
		{
			res = res * 10 + (c ^ 48);
			c = getchar();
		}
		return !flag ? res : -res;
	}
	
	const int Max_n = 4e6 + 5;
	
	int son[Max_n][3] , tot , rev[Max_n] , ans[Max_n];
	int n , tag[Max_n] , tim , root , len , pos , base[20];
	
	char c[Max_n];
	
	inline void build(int &now , const int dep , const int id)
	{
		now = ++ tim;
		if(dep == n)
		{
			rev[now] = id;
			return;
		}
		build(son[now][0] , dep + 1 , id);
		build(son[now][1] , dep + 1 , id + base[dep]);
		build(son[now][2] , dep + 1 , id + base[dep] * 2);
	}
	
	inline void push_down(const int tr)
	{
		if(tag[tr] == 0)	return;
		swap(son[tr][1] , son[tr][2]);
		tag[son[tr][0]] ^= 1 , tag[son[tr][1]] ^= 1 , tag[son[tr][2]] ^= 1;
		tag[tr] = 0;
	}

	inline void add(const int tr)
	{
		if(son[tr][0] == 0)	return;
		push_down(tr);
		int tmp0 = son[tr][0] , tmp1 = son[tr][1] , tmp2 = son[tr][2];
		son[tr][0] = tmp2 , son[tr][1] = tmp0 , son[tr][2] = tmp1;
		add(son[tr][0]);
	}
	
	void print(const int now , const int dep , const int id)
	{
		if(dep == n)
		{
			ans[rev[now]] = id;
			return;
		}
		push_down(now);
		print(son[now][0] , dep + 1 , id);
		print(son[now][1] , dep + 1 , id + base[dep]);
		print(son[now][2] , dep + 1 , id + base[dep] * 2);
	}
	
	inline void main()
	{
		n = read();
		base[0] = 1;
		for(int i = 1 ; i <= n ; ++ i)
			base[i] = base[i - 1] * 3;
		build(root , 0 , 0);
		scanf("%s" , c + 1);
		len = strlen(c + 1);
		for(int i = 1 ; i <= len ; ++ i)
			if(c[i] == 'S')
				tag[root] ^= 1;
			else add(root);
		print(root , 0 , 0);
		for(int i = 0 ; i < base[n] ; ++ i)
			printf("%d " , ans[i]);
	}
}

int main()
{
	//freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
