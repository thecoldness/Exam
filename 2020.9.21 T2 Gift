#include <cstdio>
#include <algorithm>
#include <cctype>
#include <climits>
using namespace std;
typedef long long ll;
const int MOD = 1e7 + 7;
inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
const int Max_n = 1e3 + 5;
int n , a[Max_n] , m , suf[Max_n] , f[Max_n] , pre[Max_n][Max_n] , all;
ll ans;
inline bool cmp(int a , int b)
{
	return a > b;
}
int main()
{
	n = read() , m = read();
	for(int i = 1 ; i <= n ; ++ i)
		a[i] = read() , all += a[i];
	if(all <= m)
	{
		putchar('1');
		return 0;
	}
	sort(a + 1 , a + n + 1 , cmp);
	for(int i = n ; i ; -- i)
		suf[i] = suf[i + 1] + a[i];
	f[0] = 1;
	for(int i = 1 ; i <= n ; ++ i)
	{
		for(int j = m ; j >= a[i] ; -- j)
			f[j] += f[j - a[i]] , f[j] %= MOD;
		for(int j = 1 ; j <= m ; ++ j)
			pre[i][j] = pre[i][j - 1] + f[j] , pre[i][j] %= MOD;
	}
	for(int i = n ; i ; -- i)
	{
		int hav = m - suf[i + 1];
		if(hav < 0)	break;
		ans += pre[i - 1][hav] - pre[i - 1][max(hav - a[i] , 0)] , ans %= MOD;
	}
	printf("%lld" , (ans + MOD + 1) % MOD);
	return 0;
}
