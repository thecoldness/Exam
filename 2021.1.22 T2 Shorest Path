#include <cstdio>
#include <cctype>
#include <cstring>
#include <algorithm>
#include <queue>
#include <cassert>
using namespace std;

namespace thecold
{
	typedef long long ll;
	typedef unsigned long long nll;
	
	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}
	
	const int Max_n = 2e5 + 5; const int Max_len = 2e7;
	const int base = 133; const int jzp = 1e9 + 7;
	
	int sum[Max_len] , cnt , son[Max_len][2] , tot , h , s;
	int n , m , head[Max_n];
	
	nll hash[Max_len];
	
	struct dist
	{
		ll dist1; int dist2;
		dist(ll a , int b)
		{
			dist1 = a , dist2 = b;
		}
		dist(){}
	}INF , zero;
	
	inline nll quickpow(nll x , nll y)
	{
		nll ret = 1;
		while(y)
		{
			if(y & 1) ret = ret * x;
			x = x * x , y >>= 1;
		}
		return ret;
	}
	
	inline void push_up(const int now , const int l , const int r)
	{
		int mid = (l + r) >> 1 , len = (mid - l + 1);
		hash[now] = hash[son[now][1]] * quickpow(base , len) + hash[son[now][0]];
	}
	
	inline void insert(const int pos  , const int lst , int &now , const int l , const int r)
	{
		now = ++ cnt; sum[now] = sum[lst] + 1;
		if(l == r) return hash[now] = sum[now] , void();
		int mid = (l + r) >> 1;
		son[now][0] = son[lst][0] , son[now][1] = son[lst][1];
		if(mid >= pos) insert(pos , son[lst][0] , son[now][0] , l , mid);
		else insert(pos , son[lst][1] , son[now][1] , mid + 1 , r);
		push_up(now , l , r);
	}
	
	int compare(const int x , const int y , const int l , const int r)
	{
		if(hash[x] == hash[y]) return -1; 
		if(!x || !y) return x > y;
		if(l == r) return sum[x] > sum[y]; 
		int mid = (l + r) >> 1;
		if(hash[son[x][1]] != hash[son[y][1]]) return compare(son[x][1] , son[y][1] , mid + 1 , r);
		return compare(son[x][0] , son[y][0] , l , mid);
	}
	
	inline bool cmp(dist a , dist b)
	{
		int ret = compare(a.dist2 , b.dist2 , 51 , 2e5 + 1);
		assert(!(ret == -1 && hash[a.dist2] != hash[b.dist2]));
		if(ret != -1) return ret;
		return a.dist1 > b.dist1;
	}
	
	inline void change(const int lst , int &now , const int l , const int r , const int ll , const int rr , const int zo)
	{
		if(!lst || ll > r || rr < l) return;	
		now = ++ cnt;
		if(l <= ll && rr <= r) return now = zo , void();
		int mid = (ll + rr) >> 1; son[now][0] = son[lst][0] , son[now][1] = son[lst][1];
		change(son[lst][0] , son[now][0] , l , r , ll , mid , son[zo][0]) , change(son[lst][1] , son[now][1] , l , r , mid + 1 , rr , son[zo][1]);
		push_up(now , ll , rr);
	}
	
	inline int query(const int now , const int l , const int r)
	{
		if(l == r || !now) return l;
		int mid = (l + r) >> 1; // bug
		if(sum[son[now][0]] == l - mid + 1) return query(son[now][1] , mid + 1 , r);
		return query(son[now][0] , l , mid);
	}

	int query_sum(const int now , const int l , const int r , const int ll , const int rr)
	{
		if(!now || ll > r || rr < l) return 0;
		if(l <= ll && rr <= r) return sum[now];
		int mid = (ll + rr) >> 1;
		// return query_sum(son[now][0] , l , r , ll , mid) + query_sum(son[now][1], l , r , mid + 1 , r);bug
		return query_sum(son[now][0] , l , r , ll , mid) + query_sum(son[now][1], l , r , mid + 1 , rr);
	}
	
	dist operator + (dist a , int b)
	{
		dist ret = a , tmp = a;// bug
		if(b <= 50)
		{
			ret.dist1 += 1ll << b;
			if(ret.dist1 >= 1ll << 51)
			{
				assert(0 >= 5);
				ret.dist1 -= 1ll << 51; int pos = query(ret.dist2 , 51 , 2e5 + 1);
				if(pos > 51) change(a.dist2 , ret.dist2 , 51 , pos - 1 , 51 , 2e5 + 1 , zero.dist2);
				insert(pos , a.dist2 , ret.dist2 , 51 , 2e5 + 1);
			}
		}
		else
		{
			int l = b , r = b + 1e5 , ans = b - 1;
			while(l <= r)
			{
				int mid = (l + r) >> 1 , cnt = query_sum(a.dist2 , b , mid , 51 , 2e5 + 1);
				if(cnt == (mid - b + 1))
					l = mid + 1 , ans = mid;
				else r = mid - 1;
			}
			// if(ans > b) change(a.dist2 , ret.dist2 , b , ans , 51 , 2e5 + 1 , zero.dist2); bug
			if(ans >= b) change(a.dist2 , tmp.dist2 , b , ans , 51 , 2e5 + 1 , zero.dist2);
			insert(ans + 1 , tmp.dist2 , ret.dist2 , 51 , 2e5 + 1);
		}
		return ret;
	}
	
	dist dis[Max_n];
	
	struct Node
	{
		int nex , to , val;
		Node(int a , int b , int c)
		{
			nex = a , to = b , val = c;
		}
		Node(){}
	}edge[Max_n << 1];
	
	inline void add_edge(const int x , const int y , const int z)
	{
		edge[ ++ tot] = Node(head[x] , y , z) , head[x] = tot;
		edge[ ++ tot] = Node(head[y] , x , z) , head[y] = tot;
	}
	
	struct God
	{
		int id; dist val;
		God(int a , dist b)
		{
			id = a , val = b;
		}
		God(){}
		bool operator < (const God &a) const
		{
			return cmp(val , a.val);
		}
	};
	
	inline void build(int &now , const int l , const int r , const int val)
	{
		now = ++ cnt; if(l == r) return sum[now] = hash[now] = val , void();
		int mid = (l + r) >> 1;
		build(son[now][0] , l , mid , val) , build(son[now][1] , mid + 1 , r , val);
		push_up(now , l , r);
	}
	
	inline int qp(ll x , ll y)
	{
		ll ret = 1;
		while(y)
		{
			if(y & 1) ret = ret * x % jzp;
			x = x * x % jzp , y >>= 1;
		}
		return ret;
	}
	
	inline int add(const int x , const int y)
	{
		int ret = x + y;
		if(ret >= jzp) ret -= jzp;
		return ret;
	}
	
	inline ll get_ans(const int now , const int l , const int r)
	{
		if(!now) return 0;	
		if(l == r) return sum[now] == 0 ? 0 : qp(2 , l);
		int mid = (l + r) >> 1;	
		return add(get_ans(son[now][0] , l , mid) , get_ans(son[now][1] , mid + 1 , r));
	}
	
	bool vis[Max_n];
	
	priority_queue<God> zzz;
	
	inline void main()
	{
		n = read() , m = read();
		for(int i = 1 ; i <= m ; ++ i)
		{
			int ui = read() , vi = read() , ti = read();
			add_edge(ui , vi , ti);
		}
		h = read() , s = read();
		build(INF.dist2 , 51 , 2e5 + 1 , 1) , build(zero.dist2 , 51 , 2e5 + 1 , 0);
		for(int i = 1 ; i <= n ; ++ i)
			dis[i] = INF;
		dis[h] = dist(0 , 0); zzz.push(God(h , dis[h]));
		while(!zzz.empty())
		{
			int now = zzz.top().id; zzz.pop();
			if(vis[now]) continue; 
			vis[now] = true;
			for(int i = head[now] ; i ; i = edge[i].nex)
			{
				int nex = edge[i].to , va = edge[i].val; 
				if(vis[nex]) continue; 
				dist st = dis[now] + va;
				if(cmp(dis[nex] , st))
				{
					dis[nex] = st , zzz.push(God(nex , dis[nex]));
				}
			}
		}
		printf("%d\n" , add(get_ans(dis[s].dist2 , 51 , 2e5 + 1) , dis[s].dist1 % jzp));
	}
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
/*
5 3
2 4 51
1 3 51
5 4 51
2 5
ans = 595845303
4 3
2 4 57
1 4 24
4 3 56
2 3
ans = 600574348
*/
